/* soapH.h
   Generated by gSOAP 2.8.16 from ServerAPI.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data),0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data),0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_LONG64
#define SOAP_TYPE_LONG64 (20)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap*, LONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

#ifndef soap_write_LONG64
#define soap_write_LONG64(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_LONG64(soap, data),0) || soap_put_LONG64(soap, data, "long", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

#ifndef soap_read_LONG64
#define soap_read_LONG64(soap, data) ( soap_begin_recv(soap) || !soap_get_LONG64(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedByte
#define SOAP_TYPE_unsignedByte (11)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap*, unsigned char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

#ifndef soap_write_unsignedByte
#define soap_write_unsignedByte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedByte(soap, data),0) || soap_put_unsignedByte(soap, data, "unsignedByte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

#ifndef soap_read_unsignedByte
#define soap_read_unsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedInt
#define SOAP_TYPE_unsignedInt (10)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap*, unsigned int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

#ifndef soap_write_unsignedInt
#define soap_write_unsignedInt(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedInt(soap, data),0) || soap_put_unsignedInt(soap, data, "unsignedInt", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

#ifndef soap_read_unsignedInt
#define soap_read_unsignedInt(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedInt(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_time
#define SOAP_TYPE_time (17)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap*, time_t *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap*, const time_t *, const char*, const char*);

#ifndef soap_write_time
#define soap_write_time(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_time(soap, data),0) || soap_put_time(soap, data, "dateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap*, time_t *, const char*, const char*);

#ifndef soap_read_time
#define soap_read_time(soap, data) ( soap_begin_recv(soap) || !soap_get_time(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns1__classPresentationType
#define SOAP_TYPE_ns1__classPresentationType (63)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__classPresentationType(struct soap*, enum ns1__classPresentationType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__classPresentationType(struct soap*, const char*, int, const enum ns1__classPresentationType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__classPresentationType2s(struct soap*, enum ns1__classPresentationType);
SOAP_FMAC3 enum ns1__classPresentationType * SOAP_FMAC4 soap_in_ns1__classPresentationType(struct soap*, const char*, enum ns1__classPresentationType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__classPresentationType(struct soap*, const char*, enum ns1__classPresentationType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__classPresentationType(struct soap*, const enum ns1__classPresentationType *, const char*, const char*);

#ifndef soap_write_ns1__classPresentationType
#define soap_write_ns1__classPresentationType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__classPresentationType(soap, data),0) || soap_put_ns1__classPresentationType(soap, data, "ns1:classPresentationType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns1__classPresentationType * SOAP_FMAC4 soap_get_ns1__classPresentationType(struct soap*, enum ns1__classPresentationType *, const char*, const char*);

#ifndef soap_read_ns1__classPresentationType
#define soap_read_ns1__classPresentationType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__classPresentationType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_bool(soap, data),0) || soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__ns1__userType_attributesMap_entry
#define SOAP_TYPE__ns1__userType_attributesMap_entry (84)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__userType_attributesMap_entry(struct soap*, const char*, int, const _ns1__userType_attributesMap_entry *, const char*);
SOAP_FMAC3 _ns1__userType_attributesMap_entry * SOAP_FMAC4 soap_in__ns1__userType_attributesMap_entry(struct soap*, const char*, _ns1__userType_attributesMap_entry *, const char*);

#ifndef soap_write__ns1__userType_attributesMap_entry
#define soap_write__ns1__userType_attributesMap_entry(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:userType-attributesMap-entry", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__userType_attributesMap_entry * SOAP_FMAC4 soap_get__ns1__userType_attributesMap_entry(struct soap*, _ns1__userType_attributesMap_entry *, const char*, const char*);

#ifndef soap_read__ns1__userType_attributesMap_entry
#define soap_read__ns1__userType_attributesMap_entry(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__userType_attributesMap_entry(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__userType_attributesMap_entry * SOAP_FMAC2 soap_instantiate__ns1__userType_attributesMap_entry(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__userType_attributesMap_entry * soap_new__ns1__userType_attributesMap_entry(struct soap *soap, int n = -1) { return soap_instantiate__ns1__userType_attributesMap_entry(soap, n, NULL, NULL, NULL); }

inline _ns1__userType_attributesMap_entry * soap_new_req__ns1__userType_attributesMap_entry(struct soap *soap) { _ns1__userType_attributesMap_entry *_p = soap_instantiate__ns1__userType_attributesMap_entry(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__userType_attributesMap_entry * soap_new_set__ns1__userType_attributesMap_entry(struct soap *soap, wchar_t *key, ns1__variableDefinition *value) { _ns1__userType_attributesMap_entry *_p = soap_instantiate__ns1__userType_attributesMap_entry(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__userType_attributesMap_entry::key = key; _p->_ns1__userType_attributesMap_entry::value = value; } return _p; }

inline void soap_delete__ns1__userType_attributesMap_entry(struct soap *soap, _ns1__userType_attributesMap_entry *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__userType_attributesMap_entry(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__userType_attributesMap
#define SOAP_TYPE__ns1__userType_attributesMap (83)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__userType_attributesMap(struct soap*, const char*, int, const _ns1__userType_attributesMap *, const char*);
SOAP_FMAC3 _ns1__userType_attributesMap * SOAP_FMAC4 soap_in__ns1__userType_attributesMap(struct soap*, const char*, _ns1__userType_attributesMap *, const char*);

#ifndef soap_write__ns1__userType_attributesMap
#define soap_write__ns1__userType_attributesMap(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:userType-attributesMap", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__userType_attributesMap * SOAP_FMAC4 soap_get__ns1__userType_attributesMap(struct soap*, _ns1__userType_attributesMap *, const char*, const char*);

#ifndef soap_read__ns1__userType_attributesMap
#define soap_read__ns1__userType_attributesMap(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__userType_attributesMap(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__userType_attributesMap * SOAP_FMAC2 soap_instantiate__ns1__userType_attributesMap(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__userType_attributesMap * soap_new__ns1__userType_attributesMap(struct soap *soap, int n = -1) { return soap_instantiate__ns1__userType_attributesMap(soap, n, NULL, NULL, NULL); }

inline _ns1__userType_attributesMap * soap_new_req__ns1__userType_attributesMap(struct soap *soap, int __sizeentry, _ns1__userType_attributesMap_entry *entry) { _ns1__userType_attributesMap *_p = soap_instantiate__ns1__userType_attributesMap(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__userType_attributesMap::__sizeentry = __sizeentry; _p->_ns1__userType_attributesMap::entry = entry; } return _p; }

inline _ns1__userType_attributesMap * soap_new_set__ns1__userType_attributesMap(struct soap *soap, int __sizeentry, _ns1__userType_attributesMap_entry *entry) { _ns1__userType_attributesMap *_p = soap_instantiate__ns1__userType_attributesMap(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__userType_attributesMap::__sizeentry = __sizeentry; _p->_ns1__userType_attributesMap::entry = entry; } return _p; }

inline void soap_delete__ns1__userType_attributesMap(struct soap *soap, _ns1__userType_attributesMap *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__userType_attributesMap(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__classPresentationType_
#define SOAP_TYPE_ns1__classPresentationType_ (64)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__classPresentationType_(struct soap*, const char*, int, const ns1__classPresentationType_ *, const char*);
SOAP_FMAC3 ns1__classPresentationType_ * SOAP_FMAC4 soap_in_ns1__classPresentationType_(struct soap*, const char*, ns1__classPresentationType_ *, const char*);

#ifndef soap_write_ns1__classPresentationType_
#define soap_write_ns1__classPresentationType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:classPresentationType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__classPresentationType_ * SOAP_FMAC4 soap_get_ns1__classPresentationType_(struct soap*, ns1__classPresentationType_ *, const char*, const char*);

#ifndef soap_read_ns1__classPresentationType_
#define soap_read_ns1__classPresentationType_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__classPresentationType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__classPresentationType_ * SOAP_FMAC2 soap_instantiate_ns1__classPresentationType_(struct soap*, int, const char*, const char*, size_t*);

inline ns1__classPresentationType_ * soap_new_ns1__classPresentationType_(struct soap *soap, int n = -1) { return soap_instantiate_ns1__classPresentationType_(soap, n, NULL, NULL, NULL); }

inline ns1__classPresentationType_ * soap_new_req_ns1__classPresentationType_(struct soap *soap, enum ns1__classPresentationType __item) { ns1__classPresentationType_ *_p = soap_instantiate_ns1__classPresentationType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__classPresentationType_::__item = __item; } return _p; }

inline ns1__classPresentationType_ * soap_new_set_ns1__classPresentationType_(struct soap *soap, enum ns1__classPresentationType __item, char *__item1) { ns1__classPresentationType_ *_p = soap_instantiate_ns1__classPresentationType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__classPresentationType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__classPresentationType_(struct soap *soap, ns1__classPresentationType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__classPresentationType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__wfVariableStub
#define SOAP_TYPE_ns2__wfVariableStub (62)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__wfVariableStub(struct soap*, const char*, int, const ns2__wfVariableStub *, const char*);
SOAP_FMAC3 ns2__wfVariableStub * SOAP_FMAC4 soap_in_ns2__wfVariableStub(struct soap*, const char*, ns2__wfVariableStub *, const char*);

#ifndef soap_write_ns2__wfVariableStub
#define soap_write_ns2__wfVariableStub(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:wfVariableStub", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__wfVariableStub * SOAP_FMAC4 soap_get_ns2__wfVariableStub(struct soap*, ns2__wfVariableStub *, const char*, const char*);

#ifndef soap_read_ns2__wfVariableStub
#define soap_read_ns2__wfVariableStub(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__wfVariableStub(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__wfVariableStub * SOAP_FMAC2 soap_instantiate_ns2__wfVariableStub(struct soap*, int, const char*, const char*, size_t*);

inline ns2__wfVariableStub * soap_new_ns2__wfVariableStub(struct soap *soap, int n = -1) { return soap_instantiate_ns2__wfVariableStub(soap, n, NULL, NULL, NULL); }

inline ns2__wfVariableStub * soap_new_req_ns2__wfVariableStub(struct soap *soap) { ns2__wfVariableStub *_p = soap_instantiate_ns2__wfVariableStub(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__wfVariableStub * soap_new_set_ns2__wfVariableStub(struct soap *soap, ns1__variableDefinition *definition, xsd__anyType *value, char *__item1) { ns2__wfVariableStub *_p = soap_instantiate_ns2__wfVariableStub(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__wfVariableStub::definition = definition; _p->ns2__wfVariableStub::value = value; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__wfVariableStub(struct soap *soap, ns2__wfVariableStub *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__wfVariableStub(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__assignTaskResponse
#define SOAP_TYPE_ns1__assignTaskResponse (61)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__assignTaskResponse(struct soap*, const char*, int, const ns1__assignTaskResponse *, const char*);
SOAP_FMAC3 ns1__assignTaskResponse * SOAP_FMAC4 soap_in_ns1__assignTaskResponse(struct soap*, const char*, ns1__assignTaskResponse *, const char*);

#ifndef soap_write_ns1__assignTaskResponse
#define soap_write_ns1__assignTaskResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:assignTaskResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__assignTaskResponse * SOAP_FMAC4 soap_get_ns1__assignTaskResponse(struct soap*, ns1__assignTaskResponse *, const char*, const char*);

#ifndef soap_read_ns1__assignTaskResponse
#define soap_read_ns1__assignTaskResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__assignTaskResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__assignTaskResponse * SOAP_FMAC2 soap_instantiate_ns1__assignTaskResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__assignTaskResponse * soap_new_ns1__assignTaskResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__assignTaskResponse(soap, n, NULL, NULL, NULL); }

inline ns1__assignTaskResponse * soap_new_req_ns1__assignTaskResponse(struct soap *soap) { ns1__assignTaskResponse *_p = soap_instantiate_ns1__assignTaskResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__assignTaskResponse * soap_new_set_ns1__assignTaskResponse(struct soap *soap, char *__item1) { ns1__assignTaskResponse *_p = soap_instantiate_ns1__assignTaskResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__assignTaskResponse(struct soap *soap, ns1__assignTaskResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__assignTaskResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__assignTask
#define SOAP_TYPE_ns1__assignTask (60)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__assignTask(struct soap*, const char*, int, const ns1__assignTask *, const char*);
SOAP_FMAC3 ns1__assignTask * SOAP_FMAC4 soap_in_ns1__assignTask(struct soap*, const char*, ns1__assignTask *, const char*);

#ifndef soap_write_ns1__assignTask
#define soap_write_ns1__assignTask(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:assignTask", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__assignTask * SOAP_FMAC4 soap_get_ns1__assignTask(struct soap*, ns1__assignTask *, const char*, const char*);

#ifndef soap_read_ns1__assignTask
#define soap_read_ns1__assignTask(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__assignTask(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__assignTask * SOAP_FMAC2 soap_instantiate_ns1__assignTask(struct soap*, int, const char*, const char*, size_t*);

inline ns1__assignTask * soap_new_ns1__assignTask(struct soap *soap, int n = -1) { return soap_instantiate_ns1__assignTask(soap, n, NULL, NULL, NULL); }

inline ns1__assignTask * soap_new_req_ns1__assignTask(struct soap *soap) { ns1__assignTask *_p = soap_instantiate_ns1__assignTask(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__assignTask * soap_new_set_ns1__assignTask(struct soap *soap, ns1__user *user, LONG64 *taskId, ns1__wfExecutor *previousOwner, ns1__wfExecutor *newExecutor, char *__item1) { ns1__assignTask *_p = soap_instantiate_ns1__assignTask(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__assignTask::user = user; _p->ns1__assignTask::taskId = taskId; _p->ns1__assignTask::previousOwner = previousOwner; _p->ns1__assignTask::newExecutor = newExecutor; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__assignTask(struct soap *soap, ns1__assignTask *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__assignTask(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getTaskResponse
#define SOAP_TYPE_ns1__getTaskResponse (59)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTaskResponse(struct soap*, const char*, int, const ns1__getTaskResponse *, const char*);
SOAP_FMAC3 ns1__getTaskResponse * SOAP_FMAC4 soap_in_ns1__getTaskResponse(struct soap*, const char*, ns1__getTaskResponse *, const char*);

#ifndef soap_write_ns1__getTaskResponse
#define soap_write_ns1__getTaskResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:getTaskResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__getTaskResponse * SOAP_FMAC4 soap_get_ns1__getTaskResponse(struct soap*, ns1__getTaskResponse *, const char*, const char*);

#ifndef soap_read_ns1__getTaskResponse
#define soap_read_ns1__getTaskResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getTaskResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__getTaskResponse * SOAP_FMAC2 soap_instantiate_ns1__getTaskResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getTaskResponse * soap_new_ns1__getTaskResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getTaskResponse(soap, n, NULL, NULL, NULL); }

inline ns1__getTaskResponse * soap_new_req_ns1__getTaskResponse(struct soap *soap) { ns1__getTaskResponse *_p = soap_instantiate_ns1__getTaskResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__getTaskResponse * soap_new_set_ns1__getTaskResponse(struct soap *soap, ns1__wfTask *result, char *__item1) { ns1__getTaskResponse *_p = soap_instantiate_ns1__getTaskResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__getTaskResponse::result = result; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__getTaskResponse(struct soap *soap, ns1__getTaskResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getTaskResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getTask
#define SOAP_TYPE_ns1__getTask (58)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTask(struct soap*, const char*, int, const ns1__getTask *, const char*);
SOAP_FMAC3 ns1__getTask * SOAP_FMAC4 soap_in_ns1__getTask(struct soap*, const char*, ns1__getTask *, const char*);

#ifndef soap_write_ns1__getTask
#define soap_write_ns1__getTask(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:getTask", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__getTask * SOAP_FMAC4 soap_get_ns1__getTask(struct soap*, ns1__getTask *, const char*, const char*);

#ifndef soap_read_ns1__getTask
#define soap_read_ns1__getTask(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getTask(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__getTask * SOAP_FMAC2 soap_instantiate_ns1__getTask(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getTask * soap_new_ns1__getTask(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getTask(soap, n, NULL, NULL, NULL); }

inline ns1__getTask * soap_new_req_ns1__getTask(struct soap *soap) { ns1__getTask *_p = soap_instantiate_ns1__getTask(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__getTask * soap_new_set_ns1__getTask(struct soap *soap, ns1__user *user, LONG64 *taskId, char *__item1) { ns1__getTask *_p = soap_instantiate_ns1__getTask(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__getTask::user = user; _p->ns1__getTask::taskId = taskId; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__getTask(struct soap *soap, ns1__getTask *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getTask(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getProcessTasksResponse
#define SOAP_TYPE_ns1__getProcessTasksResponse (57)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getProcessTasksResponse(struct soap*, const char*, int, const ns1__getProcessTasksResponse *, const char*);
SOAP_FMAC3 ns1__getProcessTasksResponse * SOAP_FMAC4 soap_in_ns1__getProcessTasksResponse(struct soap*, const char*, ns1__getProcessTasksResponse *, const char*);

#ifndef soap_write_ns1__getProcessTasksResponse
#define soap_write_ns1__getProcessTasksResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:getProcessTasksResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__getProcessTasksResponse * SOAP_FMAC4 soap_get_ns1__getProcessTasksResponse(struct soap*, ns1__getProcessTasksResponse *, const char*, const char*);

#ifndef soap_read_ns1__getProcessTasksResponse
#define soap_read_ns1__getProcessTasksResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getProcessTasksResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__getProcessTasksResponse * SOAP_FMAC2 soap_instantiate_ns1__getProcessTasksResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getProcessTasksResponse * soap_new_ns1__getProcessTasksResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getProcessTasksResponse(soap, n, NULL, NULL, NULL); }

inline ns1__getProcessTasksResponse * soap_new_req_ns1__getProcessTasksResponse(struct soap *soap, int __sizeresult, ns1__wfTask **result) { ns1__getProcessTasksResponse *_p = soap_instantiate_ns1__getProcessTasksResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__getProcessTasksResponse::__sizeresult = __sizeresult; _p->ns1__getProcessTasksResponse::result = result; } return _p; }

inline ns1__getProcessTasksResponse * soap_new_set_ns1__getProcessTasksResponse(struct soap *soap, int __sizeresult, ns1__wfTask **result, char *__item1) { ns1__getProcessTasksResponse *_p = soap_instantiate_ns1__getProcessTasksResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__getProcessTasksResponse::__sizeresult = __sizeresult; _p->ns1__getProcessTasksResponse::result = result; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__getProcessTasksResponse(struct soap *soap, ns1__getProcessTasksResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getProcessTasksResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getProcessTasks
#define SOAP_TYPE_ns1__getProcessTasks (56)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getProcessTasks(struct soap*, const char*, int, const ns1__getProcessTasks *, const char*);
SOAP_FMAC3 ns1__getProcessTasks * SOAP_FMAC4 soap_in_ns1__getProcessTasks(struct soap*, const char*, ns1__getProcessTasks *, const char*);

#ifndef soap_write_ns1__getProcessTasks
#define soap_write_ns1__getProcessTasks(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:getProcessTasks", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__getProcessTasks * SOAP_FMAC4 soap_get_ns1__getProcessTasks(struct soap*, ns1__getProcessTasks *, const char*, const char*);

#ifndef soap_read_ns1__getProcessTasks
#define soap_read_ns1__getProcessTasks(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getProcessTasks(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__getProcessTasks * SOAP_FMAC2 soap_instantiate_ns1__getProcessTasks(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getProcessTasks * soap_new_ns1__getProcessTasks(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getProcessTasks(soap, n, NULL, NULL, NULL); }

inline ns1__getProcessTasks * soap_new_req_ns1__getProcessTasks(struct soap *soap, bool includeSubprocesses) { ns1__getProcessTasks *_p = soap_instantiate_ns1__getProcessTasks(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__getProcessTasks::includeSubprocesses = includeSubprocesses; } return _p; }

inline ns1__getProcessTasks * soap_new_set_ns1__getProcessTasks(struct soap *soap, ns1__user *user, LONG64 *processId, bool includeSubprocesses, char *__item1) { ns1__getProcessTasks *_p = soap_instantiate_ns1__getProcessTasks(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__getProcessTasks::user = user; _p->ns1__getProcessTasks::processId = processId; _p->ns1__getProcessTasks::includeSubprocesses = includeSubprocesses; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__getProcessTasks(struct soap *soap, ns1__getProcessTasks *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getProcessTasks(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__completeTaskWSResponse
#define SOAP_TYPE_ns1__completeTaskWSResponse (55)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__completeTaskWSResponse(struct soap*, const char*, int, const ns1__completeTaskWSResponse *, const char*);
SOAP_FMAC3 ns1__completeTaskWSResponse * SOAP_FMAC4 soap_in_ns1__completeTaskWSResponse(struct soap*, const char*, ns1__completeTaskWSResponse *, const char*);

#ifndef soap_write_ns1__completeTaskWSResponse
#define soap_write_ns1__completeTaskWSResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:completeTaskWSResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__completeTaskWSResponse * SOAP_FMAC4 soap_get_ns1__completeTaskWSResponse(struct soap*, ns1__completeTaskWSResponse *, const char*, const char*);

#ifndef soap_read_ns1__completeTaskWSResponse
#define soap_read_ns1__completeTaskWSResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__completeTaskWSResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__completeTaskWSResponse * SOAP_FMAC2 soap_instantiate_ns1__completeTaskWSResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__completeTaskWSResponse * soap_new_ns1__completeTaskWSResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__completeTaskWSResponse(soap, n, NULL, NULL, NULL); }

inline ns1__completeTaskWSResponse * soap_new_req_ns1__completeTaskWSResponse(struct soap *soap) { ns1__completeTaskWSResponse *_p = soap_instantiate_ns1__completeTaskWSResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__completeTaskWSResponse * soap_new_set_ns1__completeTaskWSResponse(struct soap *soap, char *__item1) { ns1__completeTaskWSResponse *_p = soap_instantiate_ns1__completeTaskWSResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__completeTaskWSResponse(struct soap *soap, ns1__completeTaskWSResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__completeTaskWSResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__variable
#define SOAP_TYPE_ns1__variable (54)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__variable(struct soap*, const char*, int, const ns1__variable *, const char*);
SOAP_FMAC3 ns1__variable * SOAP_FMAC4 soap_in_ns1__variable(struct soap*, const char*, ns1__variable *, const char*);

#ifndef soap_write_ns1__variable
#define soap_write_ns1__variable(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:variable", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__variable * SOAP_FMAC4 soap_get_ns1__variable(struct soap*, ns1__variable *, const char*, const char*);

#ifndef soap_read_ns1__variable
#define soap_read_ns1__variable(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__variable(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__variable * SOAP_FMAC2 soap_instantiate_ns1__variable(struct soap*, int, const char*, const char*, size_t*);

inline ns1__variable * soap_new_ns1__variable(struct soap *soap, int n = -1) { return soap_instantiate_ns1__variable(soap, n, NULL, NULL, NULL); }

inline ns1__variable * soap_new_req_ns1__variable(struct soap *soap) { ns1__variable *_p = soap_instantiate_ns1__variable(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__variable * soap_new_set_ns1__variable(struct soap *soap, wchar_t *name, wchar_t *scriptingName, wchar_t *format, wchar_t *value, char *__item1) { ns1__variable *_p = soap_instantiate_ns1__variable(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__variable::name = name; _p->ns1__variable::scriptingName = scriptingName; _p->ns1__variable::format = format; _p->ns1__variable::value = value; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__variable(struct soap *soap, ns1__variable *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__variable(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__completeTaskWS
#define SOAP_TYPE_ns1__completeTaskWS (53)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__completeTaskWS(struct soap*, const char*, int, const ns1__completeTaskWS *, const char*);
SOAP_FMAC3 ns1__completeTaskWS * SOAP_FMAC4 soap_in_ns1__completeTaskWS(struct soap*, const char*, ns1__completeTaskWS *, const char*);

#ifndef soap_write_ns1__completeTaskWS
#define soap_write_ns1__completeTaskWS(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:completeTaskWS", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__completeTaskWS * SOAP_FMAC4 soap_get_ns1__completeTaskWS(struct soap*, ns1__completeTaskWS *, const char*, const char*);

#ifndef soap_read_ns1__completeTaskWS
#define soap_read_ns1__completeTaskWS(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__completeTaskWS(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__completeTaskWS * SOAP_FMAC2 soap_instantiate_ns1__completeTaskWS(struct soap*, int, const char*, const char*, size_t*);

inline ns1__completeTaskWS * soap_new_ns1__completeTaskWS(struct soap *soap, int n = -1) { return soap_instantiate_ns1__completeTaskWS(soap, n, NULL, NULL, NULL); }

inline ns1__completeTaskWS * soap_new_req_ns1__completeTaskWS(struct soap *soap, int __sizevariables, ns1__variable **variables) { ns1__completeTaskWS *_p = soap_instantiate_ns1__completeTaskWS(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__completeTaskWS::__sizevariables = __sizevariables; _p->ns1__completeTaskWS::variables = variables; } return _p; }

inline ns1__completeTaskWS * soap_new_set_ns1__completeTaskWS(struct soap *soap, ns1__user *user, LONG64 *taskId, int __sizevariables, ns1__variable **variables, LONG64 *swimlaneActorId, char *__item1) { ns1__completeTaskWS *_p = soap_instantiate_ns1__completeTaskWS(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__completeTaskWS::user = user; _p->ns1__completeTaskWS::taskId = taskId; _p->ns1__completeTaskWS::__sizevariables = __sizevariables; _p->ns1__completeTaskWS::variables = variables; _p->ns1__completeTaskWS::swimlaneActorId = swimlaneActorId; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__completeTaskWS(struct soap *soap, ns1__completeTaskWS *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__completeTaskWS(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getTasksResponse
#define SOAP_TYPE_ns1__getTasksResponse (52)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTasksResponse(struct soap*, const char*, int, const ns1__getTasksResponse *, const char*);
SOAP_FMAC3 ns1__getTasksResponse * SOAP_FMAC4 soap_in_ns1__getTasksResponse(struct soap*, const char*, ns1__getTasksResponse *, const char*);

#ifndef soap_write_ns1__getTasksResponse
#define soap_write_ns1__getTasksResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:getTasksResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__getTasksResponse * SOAP_FMAC4 soap_get_ns1__getTasksResponse(struct soap*, ns1__getTasksResponse *, const char*, const char*);

#ifndef soap_read_ns1__getTasksResponse
#define soap_read_ns1__getTasksResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getTasksResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__getTasksResponse * SOAP_FMAC2 soap_instantiate_ns1__getTasksResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getTasksResponse * soap_new_ns1__getTasksResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getTasksResponse(soap, n, NULL, NULL, NULL); }

inline ns1__getTasksResponse * soap_new_req_ns1__getTasksResponse(struct soap *soap, int __sizeresult, ns1__wfTask **result) { ns1__getTasksResponse *_p = soap_instantiate_ns1__getTasksResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__getTasksResponse::__sizeresult = __sizeresult; _p->ns1__getTasksResponse::result = result; } return _p; }

inline ns1__getTasksResponse * soap_new_set_ns1__getTasksResponse(struct soap *soap, int __sizeresult, ns1__wfTask **result, char *__item1) { ns1__getTasksResponse *_p = soap_instantiate_ns1__getTasksResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__getTasksResponse::__sizeresult = __sizeresult; _p->ns1__getTasksResponse::result = result; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__getTasksResponse(struct soap *soap, ns1__getTasksResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getTasksResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getTasks
#define SOAP_TYPE_ns1__getTasks (51)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTasks(struct soap*, const char*, int, const ns1__getTasks *, const char*);
SOAP_FMAC3 ns1__getTasks * SOAP_FMAC4 soap_in_ns1__getTasks(struct soap*, const char*, ns1__getTasks *, const char*);

#ifndef soap_write_ns1__getTasks
#define soap_write_ns1__getTasks(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:getTasks", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__getTasks * SOAP_FMAC4 soap_get_ns1__getTasks(struct soap*, ns1__getTasks *, const char*, const char*);

#ifndef soap_read_ns1__getTasks
#define soap_read_ns1__getTasks(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getTasks(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__getTasks * SOAP_FMAC2 soap_instantiate_ns1__getTasks(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getTasks * soap_new_ns1__getTasks(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getTasks(soap, n, NULL, NULL, NULL); }

inline ns1__getTasks * soap_new_req_ns1__getTasks(struct soap *soap) { ns1__getTasks *_p = soap_instantiate_ns1__getTasks(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__getTasks * soap_new_set_ns1__getTasks(struct soap *soap, ns1__user *user, ns1__batchPresentation *batchPresentation, char *__item1) { ns1__getTasks *_p = soap_instantiate_ns1__getTasks(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__getTasks::user = user; _p->ns1__getTasks::batchPresentation = batchPresentation; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__getTasks(struct soap *soap, ns1__getTasks *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getTasks(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__reassignTasksResponse
#define SOAP_TYPE_ns1__reassignTasksResponse (50)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__reassignTasksResponse(struct soap*, const char*, int, const ns1__reassignTasksResponse *, const char*);
SOAP_FMAC3 ns1__reassignTasksResponse * SOAP_FMAC4 soap_in_ns1__reassignTasksResponse(struct soap*, const char*, ns1__reassignTasksResponse *, const char*);

#ifndef soap_write_ns1__reassignTasksResponse
#define soap_write_ns1__reassignTasksResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:reassignTasksResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__reassignTasksResponse * SOAP_FMAC4 soap_get_ns1__reassignTasksResponse(struct soap*, ns1__reassignTasksResponse *, const char*, const char*);

#ifndef soap_read_ns1__reassignTasksResponse
#define soap_read_ns1__reassignTasksResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__reassignTasksResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__reassignTasksResponse * SOAP_FMAC2 soap_instantiate_ns1__reassignTasksResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__reassignTasksResponse * soap_new_ns1__reassignTasksResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__reassignTasksResponse(soap, n, NULL, NULL, NULL); }

inline ns1__reassignTasksResponse * soap_new_req_ns1__reassignTasksResponse(struct soap *soap, int result) { ns1__reassignTasksResponse *_p = soap_instantiate_ns1__reassignTasksResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__reassignTasksResponse::result = result; } return _p; }

inline ns1__reassignTasksResponse * soap_new_set_ns1__reassignTasksResponse(struct soap *soap, int result, char *__item1) { ns1__reassignTasksResponse *_p = soap_instantiate_ns1__reassignTasksResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__reassignTasksResponse::result = result; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__reassignTasksResponse(struct soap *soap, ns1__reassignTasksResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__reassignTasksResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__reassignTasks
#define SOAP_TYPE_ns1__reassignTasks (49)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__reassignTasks(struct soap*, const char*, int, const ns1__reassignTasks *, const char*);
SOAP_FMAC3 ns1__reassignTasks * SOAP_FMAC4 soap_in_ns1__reassignTasks(struct soap*, const char*, ns1__reassignTasks *, const char*);

#ifndef soap_write_ns1__reassignTasks
#define soap_write_ns1__reassignTasks(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:reassignTasks", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__reassignTasks * SOAP_FMAC4 soap_get_ns1__reassignTasks(struct soap*, ns1__reassignTasks *, const char*, const char*);

#ifndef soap_read_ns1__reassignTasks
#define soap_read_ns1__reassignTasks(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__reassignTasks(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__reassignTasks * SOAP_FMAC2 soap_instantiate_ns1__reassignTasks(struct soap*, int, const char*, const char*, size_t*);

inline ns1__reassignTasks * soap_new_ns1__reassignTasks(struct soap *soap, int n = -1) { return soap_instantiate_ns1__reassignTasks(soap, n, NULL, NULL, NULL); }

inline ns1__reassignTasks * soap_new_req_ns1__reassignTasks(struct soap *soap) { ns1__reassignTasks *_p = soap_instantiate_ns1__reassignTasks(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__reassignTasks * soap_new_set_ns1__reassignTasks(struct soap *soap, ns1__user *user, ns1__batchPresentation *batchPresentation, char *__item1) { ns1__reassignTasks *_p = soap_instantiate_ns1__reassignTasks(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__reassignTasks::user = user; _p->ns1__reassignTasks::batchPresentation = batchPresentation; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__reassignTasks(struct soap *soap, ns1__reassignTasks *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__reassignTasks(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__reassignTaskResponse
#define SOAP_TYPE_ns1__reassignTaskResponse (48)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__reassignTaskResponse(struct soap*, const char*, int, const ns1__reassignTaskResponse *, const char*);
SOAP_FMAC3 ns1__reassignTaskResponse * SOAP_FMAC4 soap_in_ns1__reassignTaskResponse(struct soap*, const char*, ns1__reassignTaskResponse *, const char*);

#ifndef soap_write_ns1__reassignTaskResponse
#define soap_write_ns1__reassignTaskResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:reassignTaskResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__reassignTaskResponse * SOAP_FMAC4 soap_get_ns1__reassignTaskResponse(struct soap*, ns1__reassignTaskResponse *, const char*, const char*);

#ifndef soap_read_ns1__reassignTaskResponse
#define soap_read_ns1__reassignTaskResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__reassignTaskResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__reassignTaskResponse * SOAP_FMAC2 soap_instantiate_ns1__reassignTaskResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__reassignTaskResponse * soap_new_ns1__reassignTaskResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__reassignTaskResponse(soap, n, NULL, NULL, NULL); }

inline ns1__reassignTaskResponse * soap_new_req_ns1__reassignTaskResponse(struct soap *soap) { ns1__reassignTaskResponse *_p = soap_instantiate_ns1__reassignTaskResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__reassignTaskResponse * soap_new_set_ns1__reassignTaskResponse(struct soap *soap, char *__item1) { ns1__reassignTaskResponse *_p = soap_instantiate_ns1__reassignTaskResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__reassignTaskResponse(struct soap *soap, ns1__reassignTaskResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__reassignTaskResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__reassignTask
#define SOAP_TYPE_ns1__reassignTask (47)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__reassignTask(struct soap*, const char*, int, const ns1__reassignTask *, const char*);
SOAP_FMAC3 ns1__reassignTask * SOAP_FMAC4 soap_in_ns1__reassignTask(struct soap*, const char*, ns1__reassignTask *, const char*);

#ifndef soap_write_ns1__reassignTask
#define soap_write_ns1__reassignTask(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:reassignTask", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__reassignTask * SOAP_FMAC4 soap_get_ns1__reassignTask(struct soap*, ns1__reassignTask *, const char*, const char*);

#ifndef soap_read_ns1__reassignTask
#define soap_read_ns1__reassignTask(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__reassignTask(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__reassignTask * SOAP_FMAC2 soap_instantiate_ns1__reassignTask(struct soap*, int, const char*, const char*, size_t*);

inline ns1__reassignTask * soap_new_ns1__reassignTask(struct soap *soap, int n = -1) { return soap_instantiate_ns1__reassignTask(soap, n, NULL, NULL, NULL); }

inline ns1__reassignTask * soap_new_req_ns1__reassignTask(struct soap *soap) { ns1__reassignTask *_p = soap_instantiate_ns1__reassignTask(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__reassignTask * soap_new_set_ns1__reassignTask(struct soap *soap, ns1__user *user, LONG64 *batchPresentation, char *__item1) { ns1__reassignTask *_p = soap_instantiate_ns1__reassignTask(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__reassignTask::user = user; _p->ns1__reassignTask::batchPresentation = batchPresentation; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__reassignTask(struct soap *soap, ns1__reassignTask *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__reassignTask(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__markTaskOpenedResponse
#define SOAP_TYPE_ns1__markTaskOpenedResponse (46)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__markTaskOpenedResponse(struct soap*, const char*, int, const ns1__markTaskOpenedResponse *, const char*);
SOAP_FMAC3 ns1__markTaskOpenedResponse * SOAP_FMAC4 soap_in_ns1__markTaskOpenedResponse(struct soap*, const char*, ns1__markTaskOpenedResponse *, const char*);

#ifndef soap_write_ns1__markTaskOpenedResponse
#define soap_write_ns1__markTaskOpenedResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:markTaskOpenedResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__markTaskOpenedResponse * SOAP_FMAC4 soap_get_ns1__markTaskOpenedResponse(struct soap*, ns1__markTaskOpenedResponse *, const char*, const char*);

#ifndef soap_read_ns1__markTaskOpenedResponse
#define soap_read_ns1__markTaskOpenedResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__markTaskOpenedResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__markTaskOpenedResponse * SOAP_FMAC2 soap_instantiate_ns1__markTaskOpenedResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__markTaskOpenedResponse * soap_new_ns1__markTaskOpenedResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__markTaskOpenedResponse(soap, n, NULL, NULL, NULL); }

inline ns1__markTaskOpenedResponse * soap_new_req_ns1__markTaskOpenedResponse(struct soap *soap) { ns1__markTaskOpenedResponse *_p = soap_instantiate_ns1__markTaskOpenedResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__markTaskOpenedResponse * soap_new_set_ns1__markTaskOpenedResponse(struct soap *soap, char *__item1) { ns1__markTaskOpenedResponse *_p = soap_instantiate_ns1__markTaskOpenedResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__markTaskOpenedResponse(struct soap *soap, ns1__markTaskOpenedResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__markTaskOpenedResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__markTaskOpened
#define SOAP_TYPE_ns1__markTaskOpened (45)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__markTaskOpened(struct soap*, const char*, int, const ns1__markTaskOpened *, const char*);
SOAP_FMAC3 ns1__markTaskOpened * SOAP_FMAC4 soap_in_ns1__markTaskOpened(struct soap*, const char*, ns1__markTaskOpened *, const char*);

#ifndef soap_write_ns1__markTaskOpened
#define soap_write_ns1__markTaskOpened(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:markTaskOpened", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__markTaskOpened * SOAP_FMAC4 soap_get_ns1__markTaskOpened(struct soap*, ns1__markTaskOpened *, const char*, const char*);

#ifndef soap_read_ns1__markTaskOpened
#define soap_read_ns1__markTaskOpened(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__markTaskOpened(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__markTaskOpened * SOAP_FMAC2 soap_instantiate_ns1__markTaskOpened(struct soap*, int, const char*, const char*, size_t*);

inline ns1__markTaskOpened * soap_new_ns1__markTaskOpened(struct soap *soap, int n = -1) { return soap_instantiate_ns1__markTaskOpened(soap, n, NULL, NULL, NULL); }

inline ns1__markTaskOpened * soap_new_req_ns1__markTaskOpened(struct soap *soap) { ns1__markTaskOpened *_p = soap_instantiate_ns1__markTaskOpened(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__markTaskOpened * soap_new_set_ns1__markTaskOpened(struct soap *soap, ns1__user *user, LONG64 *taskId, char *__item1) { ns1__markTaskOpened *_p = soap_instantiate_ns1__markTaskOpened(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__markTaskOpened::user = user; _p->ns1__markTaskOpened::taskId = taskId; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__markTaskOpened(struct soap *soap, ns1__markTaskOpened *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__markTaskOpened(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__variableFormat
#define SOAP_TYPE_ns1__variableFormat (44)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__variableFormat(struct soap*, const char*, int, const ns1__variableFormat *, const char*);
SOAP_FMAC3 ns1__variableFormat * SOAP_FMAC4 soap_in_ns1__variableFormat(struct soap*, const char*, ns1__variableFormat *, const char*);

#ifndef soap_write_ns1__variableFormat
#define soap_write_ns1__variableFormat(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:variableFormat", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__variableFormat * SOAP_FMAC4 soap_get_ns1__variableFormat(struct soap*, ns1__variableFormat *, const char*, const char*);

#ifndef soap_read_ns1__variableFormat
#define soap_read_ns1__variableFormat(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__variableFormat(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__variableFormat * SOAP_FMAC2 soap_instantiate_ns1__variableFormat(struct soap*, int, const char*, const char*, size_t*);

inline ns1__variableFormat * soap_new_ns1__variableFormat(struct soap *soap, int n = -1) { return soap_instantiate_ns1__variableFormat(soap, n, NULL, NULL, NULL); }

inline ns1__variableFormat * soap_new_req_ns1__variableFormat(struct soap *soap) { ns1__variableFormat *_p = soap_instantiate_ns1__variableFormat(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__variableFormat * soap_new_set_ns1__variableFormat(struct soap *soap, char *__item1) { ns1__variableFormat *_p = soap_instantiate_ns1__variableFormat(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__variableFormat(struct soap *soap, ns1__variableFormat *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__variableFormat(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__userType
#define SOAP_TYPE_ns1__userType (43)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__userType(struct soap*, const char*, int, const ns1__userType *, const char*);
SOAP_FMAC3 ns1__userType * SOAP_FMAC4 soap_in_ns1__userType(struct soap*, const char*, ns1__userType *, const char*);

#ifndef soap_write_ns1__userType
#define soap_write_ns1__userType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:userType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__userType * SOAP_FMAC4 soap_get_ns1__userType(struct soap*, ns1__userType *, const char*, const char*);

#ifndef soap_read_ns1__userType
#define soap_read_ns1__userType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__userType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__userType * SOAP_FMAC2 soap_instantiate_ns1__userType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__userType * soap_new_ns1__userType(struct soap *soap, int n = -1) { return soap_instantiate_ns1__userType(soap, n, NULL, NULL, NULL); }

inline ns1__userType * soap_new_req_ns1__userType(struct soap *soap, int __sizeattributes, ns1__variableDefinition **attributes, _ns1__userType_attributesMap& attributesMap) { ns1__userType *_p = soap_instantiate_ns1__userType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__userType::__sizeattributes = __sizeattributes; _p->ns1__userType::attributes = attributes; _p->ns1__userType::attributesMap = attributesMap; } return _p; }

inline ns1__userType * soap_new_set_ns1__userType(struct soap *soap, wchar_t *name, int __sizeattributes, ns1__variableDefinition **attributes, _ns1__userType_attributesMap& attributesMap, char *__item1) { ns1__userType *_p = soap_instantiate_ns1__userType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__userType::name = name; _p->ns1__userType::__sizeattributes = __sizeattributes; _p->ns1__userType::attributes = attributes; _p->ns1__userType::attributesMap = attributesMap; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__userType(struct soap *soap, ns1__userType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__userType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__variableDefinition
#define SOAP_TYPE_ns1__variableDefinition (42)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__variableDefinition(struct soap*, const char*, int, const ns1__variableDefinition *, const char*);
SOAP_FMAC3 ns1__variableDefinition * SOAP_FMAC4 soap_in_ns1__variableDefinition(struct soap*, const char*, ns1__variableDefinition *, const char*);

#ifndef soap_write_ns1__variableDefinition
#define soap_write_ns1__variableDefinition(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:variableDefinition", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__variableDefinition * SOAP_FMAC4 soap_get_ns1__variableDefinition(struct soap*, ns1__variableDefinition *, const char*, const char*);

#ifndef soap_read_ns1__variableDefinition
#define soap_read_ns1__variableDefinition(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__variableDefinition(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__variableDefinition * SOAP_FMAC2 soap_instantiate_ns1__variableDefinition(struct soap*, int, const char*, const char*, size_t*);

inline ns1__variableDefinition * soap_new_ns1__variableDefinition(struct soap *soap, int n = -1) { return soap_instantiate_ns1__variableDefinition(soap, n, NULL, NULL, NULL); }

inline ns1__variableDefinition * soap_new_req_ns1__variableDefinition(struct soap *soap, bool synthetic, int __sizeformatComponentUserTypes, ns1__userType **formatComponentUserTypes, bool publicAccess) { ns1__variableDefinition *_p = soap_instantiate_ns1__variableDefinition(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__variableDefinition::synthetic = synthetic; _p->ns1__variableDefinition::__sizeformatComponentUserTypes = __sizeformatComponentUserTypes; _p->ns1__variableDefinition::formatComponentUserTypes = formatComponentUserTypes; _p->ns1__variableDefinition::publicAccess = publicAccess; } return _p; }

inline ns1__variableDefinition * soap_new_set_ns1__variableDefinition(struct soap *soap, bool synthetic, wchar_t *name, wchar_t *scriptingName, wchar_t *description, wchar_t *format, wchar_t *formatLabel, ns1__userType *userType, int __sizeformatComponentUserTypes, ns1__userType **formatComponentUserTypes, bool publicAccess, xsd__anyType *defaultValue, char *__item1) { ns1__variableDefinition *_p = soap_instantiate_ns1__variableDefinition(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__variableDefinition::synthetic = synthetic; _p->ns1__variableDefinition::name = name; _p->ns1__variableDefinition::scriptingName = scriptingName; _p->ns1__variableDefinition::description = description; _p->ns1__variableDefinition::format = format; _p->ns1__variableDefinition::formatLabel = formatLabel; _p->ns1__variableDefinition::userType = userType; _p->ns1__variableDefinition::__sizeformatComponentUserTypes = __sizeformatComponentUserTypes; _p->ns1__variableDefinition::formatComponentUserTypes = formatComponentUserTypes; _p->ns1__variableDefinition::publicAccess = publicAccess; _p->ns1__variableDefinition::defaultValue = defaultValue; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__variableDefinition(struct soap *soap, ns1__variableDefinition *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__variableDefinition(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__wfTask
#define SOAP_TYPE_ns1__wfTask (41)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__wfTask(struct soap*, const char*, int, const ns1__wfTask *, const char*);
SOAP_FMAC3 ns1__wfTask * SOAP_FMAC4 soap_in_ns1__wfTask(struct soap*, const char*, ns1__wfTask *, const char*);

#ifndef soap_write_ns1__wfTask
#define soap_write_ns1__wfTask(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:wfTask", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__wfTask * SOAP_FMAC4 soap_get_ns1__wfTask(struct soap*, ns1__wfTask *, const char*, const char*);

#ifndef soap_read_ns1__wfTask
#define soap_read_ns1__wfTask(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__wfTask(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__wfTask * SOAP_FMAC2 soap_instantiate_ns1__wfTask(struct soap*, int, const char*, const char*, size_t*);

inline ns1__wfTask * soap_new_ns1__wfTask(struct soap *soap, int n = -1) { return soap_instantiate_ns1__wfTask(soap, n, NULL, NULL, NULL); }

inline ns1__wfTask * soap_new_req_ns1__wfTask(struct soap *soap, bool escalated, bool firstOpen, bool acquiredBySubstitution, int __sizevariables, ns2__wfVariableStub **variables) { ns1__wfTask *_p = soap_instantiate_ns1__wfTask(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__wfTask::escalated = escalated; _p->ns1__wfTask::firstOpen = firstOpen; _p->ns1__wfTask::acquiredBySubstitution = acquiredBySubstitution; _p->ns1__wfTask::__sizevariables = __sizevariables; _p->ns1__wfTask::variables = variables; } return _p; }

inline ns1__wfTask * soap_new_set_ns1__wfTask(struct soap *soap, LONG64 *id, wchar_t *name, wchar_t *nodeId, wchar_t *description, wchar_t *swimlaneName, ns1__wfExecutor *owner, ns1__actor *targetActor, LONG64 *definitionId, wchar_t *definitionName, LONG64 *processId, wchar_t *processHierarchyIds, time_t *creationDate, time_t *deadlineDate, time_t *deadlineWarningDate, bool escalated, bool firstOpen, bool acquiredBySubstitution, int *multitaskIndex, int __sizevariables, ns2__wfVariableStub **variables, char *__item1) { ns1__wfTask *_p = soap_instantiate_ns1__wfTask(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__wfTask::id = id; _p->ns1__wfTask::name = name; _p->ns1__wfTask::nodeId = nodeId; _p->ns1__wfTask::description = description; _p->ns1__wfTask::swimlaneName = swimlaneName; _p->ns1__wfTask::owner = owner; _p->ns1__wfTask::targetActor = targetActor; _p->ns1__wfTask::definitionId = definitionId; _p->ns1__wfTask::definitionName = definitionName; _p->ns1__wfTask::processId = processId; _p->ns1__wfTask::processHierarchyIds = processHierarchyIds; _p->ns1__wfTask::creationDate = creationDate; _p->ns1__wfTask::deadlineDate = deadlineDate; _p->ns1__wfTask::deadlineWarningDate = deadlineWarningDate; _p->ns1__wfTask::escalated = escalated; _p->ns1__wfTask::firstOpen = firstOpen; _p->ns1__wfTask::acquiredBySubstitution = acquiredBySubstitution; _p->ns1__wfTask::multitaskIndex = multitaskIndex; _p->ns1__wfTask::__sizevariables = __sizevariables; _p->ns1__wfTask::variables = variables; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__wfTask(struct soap *soap, ns1__wfTask *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__wfTask(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getMyTasksResponse
#define SOAP_TYPE_ns1__getMyTasksResponse (40)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getMyTasksResponse(struct soap*, const char*, int, const ns1__getMyTasksResponse *, const char*);
SOAP_FMAC3 ns1__getMyTasksResponse * SOAP_FMAC4 soap_in_ns1__getMyTasksResponse(struct soap*, const char*, ns1__getMyTasksResponse *, const char*);

#ifndef soap_write_ns1__getMyTasksResponse
#define soap_write_ns1__getMyTasksResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:getMyTasksResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__getMyTasksResponse * SOAP_FMAC4 soap_get_ns1__getMyTasksResponse(struct soap*, ns1__getMyTasksResponse *, const char*, const char*);

#ifndef soap_read_ns1__getMyTasksResponse
#define soap_read_ns1__getMyTasksResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getMyTasksResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__getMyTasksResponse * SOAP_FMAC2 soap_instantiate_ns1__getMyTasksResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getMyTasksResponse * soap_new_ns1__getMyTasksResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getMyTasksResponse(soap, n, NULL, NULL, NULL); }

inline ns1__getMyTasksResponse * soap_new_req_ns1__getMyTasksResponse(struct soap *soap, int __sizeresult, ns1__wfTask **result) { ns1__getMyTasksResponse *_p = soap_instantiate_ns1__getMyTasksResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__getMyTasksResponse::__sizeresult = __sizeresult; _p->ns1__getMyTasksResponse::result = result; } return _p; }

inline ns1__getMyTasksResponse * soap_new_set_ns1__getMyTasksResponse(struct soap *soap, int __sizeresult, ns1__wfTask **result, char *__item1) { ns1__getMyTasksResponse *_p = soap_instantiate_ns1__getMyTasksResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__getMyTasksResponse::__sizeresult = __sizeresult; _p->ns1__getMyTasksResponse::result = result; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__getMyTasksResponse(struct soap *soap, ns1__getMyTasksResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getMyTasksResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__batchPresentation
#define SOAP_TYPE_ns1__batchPresentation (39)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__batchPresentation(struct soap*, const char*, int, const ns1__batchPresentation *, const char*);
SOAP_FMAC3 ns1__batchPresentation * SOAP_FMAC4 soap_in_ns1__batchPresentation(struct soap*, const char*, ns1__batchPresentation *, const char*);

#ifndef soap_write_ns1__batchPresentation
#define soap_write_ns1__batchPresentation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:batchPresentation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__batchPresentation * SOAP_FMAC4 soap_get_ns1__batchPresentation(struct soap*, ns1__batchPresentation *, const char*, const char*);

#ifndef soap_read_ns1__batchPresentation
#define soap_read_ns1__batchPresentation(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__batchPresentation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__batchPresentation * SOAP_FMAC2 soap_instantiate_ns1__batchPresentation(struct soap*, int, const char*, const char*, size_t*);

inline ns1__batchPresentation * soap_new_ns1__batchPresentation(struct soap *soap, int n = -1) { return soap_instantiate_ns1__batchPresentation(soap, n, NULL, NULL, NULL); }

inline ns1__batchPresentation * soap_new_req_ns1__batchPresentation(struct soap *soap, bool active, int rangeSize, int pageNumber, bool shared) { ns1__batchPresentation *_p = soap_instantiate_ns1__batchPresentation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__batchPresentation::active = active; _p->ns1__batchPresentation::rangeSize = rangeSize; _p->ns1__batchPresentation::pageNumber = pageNumber; _p->ns1__batchPresentation::shared = shared; } return _p; }

inline ns1__batchPresentation * soap_new_set_ns1__batchPresentation(struct soap *soap, LONG64 *id, LONG64 *version, enum ns1__classPresentationType *type, wchar_t *category, wchar_t *name, bool active, int rangeSize, int pageNumber, xsd__base64Binary *fieldsData, time_t *createDate, bool shared, char *__item1) { ns1__batchPresentation *_p = soap_instantiate_ns1__batchPresentation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__batchPresentation::id = id; _p->ns1__batchPresentation::version = version; _p->ns1__batchPresentation::type = type; _p->ns1__batchPresentation::category = category; _p->ns1__batchPresentation::name = name; _p->ns1__batchPresentation::active = active; _p->ns1__batchPresentation::rangeSize = rangeSize; _p->ns1__batchPresentation::pageNumber = pageNumber; _p->ns1__batchPresentation::fieldsData = fieldsData; _p->ns1__batchPresentation::createDate = createDate; _p->ns1__batchPresentation::shared = shared; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__batchPresentation(struct soap *soap, ns1__batchPresentation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__batchPresentation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getMyTasks
#define SOAP_TYPE_ns1__getMyTasks (38)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getMyTasks(struct soap*, const char*, int, const ns1__getMyTasks *, const char*);
SOAP_FMAC3 ns1__getMyTasks * SOAP_FMAC4 soap_in_ns1__getMyTasks(struct soap*, const char*, ns1__getMyTasks *, const char*);

#ifndef soap_write_ns1__getMyTasks
#define soap_write_ns1__getMyTasks(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:getMyTasks", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__getMyTasks * SOAP_FMAC4 soap_get_ns1__getMyTasks(struct soap*, ns1__getMyTasks *, const char*, const char*);

#ifndef soap_read_ns1__getMyTasks
#define soap_read_ns1__getMyTasks(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getMyTasks(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__getMyTasks * SOAP_FMAC2 soap_instantiate_ns1__getMyTasks(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getMyTasks * soap_new_ns1__getMyTasks(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getMyTasks(soap, n, NULL, NULL, NULL); }

inline ns1__getMyTasks * soap_new_req_ns1__getMyTasks(struct soap *soap) { ns1__getMyTasks *_p = soap_instantiate_ns1__getMyTasks(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__getMyTasks * soap_new_set_ns1__getMyTasks(struct soap *soap, ns1__user *user, ns1__batchPresentation *batchPresentation, char *__item1) { ns1__getMyTasks *_p = soap_instantiate_ns1__getMyTasks(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__getMyTasks::user = user; _p->ns1__getMyTasks::batchPresentation = batchPresentation; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__getMyTasks(struct soap *soap, ns1__getMyTasks *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getMyTasks(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__authenticateByCallerPrincipalResponse
#define SOAP_TYPE_ns1__authenticateByCallerPrincipalResponse (37)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__authenticateByCallerPrincipalResponse(struct soap*, const char*, int, const ns1__authenticateByCallerPrincipalResponse *, const char*);
SOAP_FMAC3 ns1__authenticateByCallerPrincipalResponse * SOAP_FMAC4 soap_in_ns1__authenticateByCallerPrincipalResponse(struct soap*, const char*, ns1__authenticateByCallerPrincipalResponse *, const char*);

#ifndef soap_write_ns1__authenticateByCallerPrincipalResponse
#define soap_write_ns1__authenticateByCallerPrincipalResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:authenticateByCallerPrincipalResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__authenticateByCallerPrincipalResponse * SOAP_FMAC4 soap_get_ns1__authenticateByCallerPrincipalResponse(struct soap*, ns1__authenticateByCallerPrincipalResponse *, const char*, const char*);

#ifndef soap_read_ns1__authenticateByCallerPrincipalResponse
#define soap_read_ns1__authenticateByCallerPrincipalResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__authenticateByCallerPrincipalResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__authenticateByCallerPrincipalResponse * SOAP_FMAC2 soap_instantiate_ns1__authenticateByCallerPrincipalResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__authenticateByCallerPrincipalResponse * soap_new_ns1__authenticateByCallerPrincipalResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__authenticateByCallerPrincipalResponse(soap, n, NULL, NULL, NULL); }

inline ns1__authenticateByCallerPrincipalResponse * soap_new_req_ns1__authenticateByCallerPrincipalResponse(struct soap *soap) { ns1__authenticateByCallerPrincipalResponse *_p = soap_instantiate_ns1__authenticateByCallerPrincipalResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__authenticateByCallerPrincipalResponse * soap_new_set_ns1__authenticateByCallerPrincipalResponse(struct soap *soap, ns1__user *result, char *__item1) { ns1__authenticateByCallerPrincipalResponse *_p = soap_instantiate_ns1__authenticateByCallerPrincipalResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__authenticateByCallerPrincipalResponse::result = result; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__authenticateByCallerPrincipalResponse(struct soap *soap, ns1__authenticateByCallerPrincipalResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__authenticateByCallerPrincipalResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__authenticateByCallerPrincipal
#define SOAP_TYPE_ns1__authenticateByCallerPrincipal (36)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__authenticateByCallerPrincipal(struct soap*, const char*, int, const ns1__authenticateByCallerPrincipal *, const char*);
SOAP_FMAC3 ns1__authenticateByCallerPrincipal * SOAP_FMAC4 soap_in_ns1__authenticateByCallerPrincipal(struct soap*, const char*, ns1__authenticateByCallerPrincipal *, const char*);

#ifndef soap_write_ns1__authenticateByCallerPrincipal
#define soap_write_ns1__authenticateByCallerPrincipal(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:authenticateByCallerPrincipal", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__authenticateByCallerPrincipal * SOAP_FMAC4 soap_get_ns1__authenticateByCallerPrincipal(struct soap*, ns1__authenticateByCallerPrincipal *, const char*, const char*);

#ifndef soap_read_ns1__authenticateByCallerPrincipal
#define soap_read_ns1__authenticateByCallerPrincipal(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__authenticateByCallerPrincipal(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__authenticateByCallerPrincipal * SOAP_FMAC2 soap_instantiate_ns1__authenticateByCallerPrincipal(struct soap*, int, const char*, const char*, size_t*);

inline ns1__authenticateByCallerPrincipal * soap_new_ns1__authenticateByCallerPrincipal(struct soap *soap, int n = -1) { return soap_instantiate_ns1__authenticateByCallerPrincipal(soap, n, NULL, NULL, NULL); }

inline ns1__authenticateByCallerPrincipal * soap_new_req_ns1__authenticateByCallerPrincipal(struct soap *soap) { ns1__authenticateByCallerPrincipal *_p = soap_instantiate_ns1__authenticateByCallerPrincipal(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__authenticateByCallerPrincipal * soap_new_set_ns1__authenticateByCallerPrincipal(struct soap *soap, char *__item1) { ns1__authenticateByCallerPrincipal *_p = soap_instantiate_ns1__authenticateByCallerPrincipal(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__authenticateByCallerPrincipal(struct soap *soap, ns1__authenticateByCallerPrincipal *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__authenticateByCallerPrincipal(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__authenticateByTrustedPrincipalResponse
#define SOAP_TYPE_ns1__authenticateByTrustedPrincipalResponse (35)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__authenticateByTrustedPrincipalResponse(struct soap*, const char*, int, const ns1__authenticateByTrustedPrincipalResponse *, const char*);
SOAP_FMAC3 ns1__authenticateByTrustedPrincipalResponse * SOAP_FMAC4 soap_in_ns1__authenticateByTrustedPrincipalResponse(struct soap*, const char*, ns1__authenticateByTrustedPrincipalResponse *, const char*);

#ifndef soap_write_ns1__authenticateByTrustedPrincipalResponse
#define soap_write_ns1__authenticateByTrustedPrincipalResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:authenticateByTrustedPrincipalResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__authenticateByTrustedPrincipalResponse * SOAP_FMAC4 soap_get_ns1__authenticateByTrustedPrincipalResponse(struct soap*, ns1__authenticateByTrustedPrincipalResponse *, const char*, const char*);

#ifndef soap_read_ns1__authenticateByTrustedPrincipalResponse
#define soap_read_ns1__authenticateByTrustedPrincipalResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__authenticateByTrustedPrincipalResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__authenticateByTrustedPrincipalResponse * SOAP_FMAC2 soap_instantiate_ns1__authenticateByTrustedPrincipalResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__authenticateByTrustedPrincipalResponse * soap_new_ns1__authenticateByTrustedPrincipalResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__authenticateByTrustedPrincipalResponse(soap, n, NULL, NULL, NULL); }

inline ns1__authenticateByTrustedPrincipalResponse * soap_new_req_ns1__authenticateByTrustedPrincipalResponse(struct soap *soap) { ns1__authenticateByTrustedPrincipalResponse *_p = soap_instantiate_ns1__authenticateByTrustedPrincipalResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__authenticateByTrustedPrincipalResponse * soap_new_set_ns1__authenticateByTrustedPrincipalResponse(struct soap *soap, ns1__user *result, char *__item1) { ns1__authenticateByTrustedPrincipalResponse *_p = soap_instantiate_ns1__authenticateByTrustedPrincipalResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__authenticateByTrustedPrincipalResponse::result = result; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__authenticateByTrustedPrincipalResponse(struct soap *soap, ns1__authenticateByTrustedPrincipalResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__authenticateByTrustedPrincipalResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__authenticateByTrustedPrincipal
#define SOAP_TYPE_ns1__authenticateByTrustedPrincipal (34)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__authenticateByTrustedPrincipal(struct soap*, const char*, int, const ns1__authenticateByTrustedPrincipal *, const char*);
SOAP_FMAC3 ns1__authenticateByTrustedPrincipal * SOAP_FMAC4 soap_in_ns1__authenticateByTrustedPrincipal(struct soap*, const char*, ns1__authenticateByTrustedPrincipal *, const char*);

#ifndef soap_write_ns1__authenticateByTrustedPrincipal
#define soap_write_ns1__authenticateByTrustedPrincipal(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:authenticateByTrustedPrincipal", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__authenticateByTrustedPrincipal * SOAP_FMAC4 soap_get_ns1__authenticateByTrustedPrincipal(struct soap*, ns1__authenticateByTrustedPrincipal *, const char*, const char*);

#ifndef soap_read_ns1__authenticateByTrustedPrincipal
#define soap_read_ns1__authenticateByTrustedPrincipal(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__authenticateByTrustedPrincipal(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__authenticateByTrustedPrincipal * SOAP_FMAC2 soap_instantiate_ns1__authenticateByTrustedPrincipal(struct soap*, int, const char*, const char*, size_t*);

inline ns1__authenticateByTrustedPrincipal * soap_new_ns1__authenticateByTrustedPrincipal(struct soap *soap, int n = -1) { return soap_instantiate_ns1__authenticateByTrustedPrincipal(soap, n, NULL, NULL, NULL); }

inline ns1__authenticateByTrustedPrincipal * soap_new_req_ns1__authenticateByTrustedPrincipal(struct soap *soap) { ns1__authenticateByTrustedPrincipal *_p = soap_instantiate_ns1__authenticateByTrustedPrincipal(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__authenticateByTrustedPrincipal * soap_new_set_ns1__authenticateByTrustedPrincipal(struct soap *soap, ns1__user *serviceUser, wchar_t *login, char *__item1) { ns1__authenticateByTrustedPrincipal *_p = soap_instantiate_ns1__authenticateByTrustedPrincipal(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__authenticateByTrustedPrincipal::serviceUser = serviceUser; _p->ns1__authenticateByTrustedPrincipal::login = login; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__authenticateByTrustedPrincipal(struct soap *soap, ns1__authenticateByTrustedPrincipal *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__authenticateByTrustedPrincipal(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__authenticateByLoginPasswordResponse
#define SOAP_TYPE_ns1__authenticateByLoginPasswordResponse (33)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__authenticateByLoginPasswordResponse(struct soap*, const char*, int, const ns1__authenticateByLoginPasswordResponse *, const char*);
SOAP_FMAC3 ns1__authenticateByLoginPasswordResponse * SOAP_FMAC4 soap_in_ns1__authenticateByLoginPasswordResponse(struct soap*, const char*, ns1__authenticateByLoginPasswordResponse *, const char*);

#ifndef soap_write_ns1__authenticateByLoginPasswordResponse
#define soap_write_ns1__authenticateByLoginPasswordResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:authenticateByLoginPasswordResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__authenticateByLoginPasswordResponse * SOAP_FMAC4 soap_get_ns1__authenticateByLoginPasswordResponse(struct soap*, ns1__authenticateByLoginPasswordResponse *, const char*, const char*);

#ifndef soap_read_ns1__authenticateByLoginPasswordResponse
#define soap_read_ns1__authenticateByLoginPasswordResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__authenticateByLoginPasswordResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__authenticateByLoginPasswordResponse * SOAP_FMAC2 soap_instantiate_ns1__authenticateByLoginPasswordResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__authenticateByLoginPasswordResponse * soap_new_ns1__authenticateByLoginPasswordResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__authenticateByLoginPasswordResponse(soap, n, NULL, NULL, NULL); }

inline ns1__authenticateByLoginPasswordResponse * soap_new_req_ns1__authenticateByLoginPasswordResponse(struct soap *soap) { ns1__authenticateByLoginPasswordResponse *_p = soap_instantiate_ns1__authenticateByLoginPasswordResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__authenticateByLoginPasswordResponse * soap_new_set_ns1__authenticateByLoginPasswordResponse(struct soap *soap, ns1__user *result, char *__item1) { ns1__authenticateByLoginPasswordResponse *_p = soap_instantiate_ns1__authenticateByLoginPasswordResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__authenticateByLoginPasswordResponse::result = result; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__authenticateByLoginPasswordResponse(struct soap *soap, ns1__authenticateByLoginPasswordResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__authenticateByLoginPasswordResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__authenticateByLoginPassword
#define SOAP_TYPE_ns1__authenticateByLoginPassword (32)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__authenticateByLoginPassword(struct soap*, const char*, int, const ns1__authenticateByLoginPassword *, const char*);
SOAP_FMAC3 ns1__authenticateByLoginPassword * SOAP_FMAC4 soap_in_ns1__authenticateByLoginPassword(struct soap*, const char*, ns1__authenticateByLoginPassword *, const char*);

#ifndef soap_write_ns1__authenticateByLoginPassword
#define soap_write_ns1__authenticateByLoginPassword(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:authenticateByLoginPassword", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__authenticateByLoginPassword * SOAP_FMAC4 soap_get_ns1__authenticateByLoginPassword(struct soap*, ns1__authenticateByLoginPassword *, const char*, const char*);

#ifndef soap_read_ns1__authenticateByLoginPassword
#define soap_read_ns1__authenticateByLoginPassword(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__authenticateByLoginPassword(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__authenticateByLoginPassword * SOAP_FMAC2 soap_instantiate_ns1__authenticateByLoginPassword(struct soap*, int, const char*, const char*, size_t*);

inline ns1__authenticateByLoginPassword * soap_new_ns1__authenticateByLoginPassword(struct soap *soap, int n = -1) { return soap_instantiate_ns1__authenticateByLoginPassword(soap, n, NULL, NULL, NULL); }

inline ns1__authenticateByLoginPassword * soap_new_req_ns1__authenticateByLoginPassword(struct soap *soap) { ns1__authenticateByLoginPassword *_p = soap_instantiate_ns1__authenticateByLoginPassword(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__authenticateByLoginPassword * soap_new_set_ns1__authenticateByLoginPassword(struct soap *soap, wchar_t *name, wchar_t *password, char *__item1) { ns1__authenticateByLoginPassword *_p = soap_instantiate_ns1__authenticateByLoginPassword(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__authenticateByLoginPassword::name = name; _p->ns1__authenticateByLoginPassword::password = password; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__authenticateByLoginPassword(struct soap *soap, ns1__authenticateByLoginPassword *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__authenticateByLoginPassword(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__wfExecutor
#define SOAP_TYPE_ns1__wfExecutor (31)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__wfExecutor(struct soap*, const char*, int, const ns1__wfExecutor *, const char*);
SOAP_FMAC3 ns1__wfExecutor * SOAP_FMAC4 soap_in_ns1__wfExecutor(struct soap*, const char*, ns1__wfExecutor *, const char*);

#ifndef soap_write_ns1__wfExecutor
#define soap_write_ns1__wfExecutor(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:wfExecutor", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__wfExecutor * SOAP_FMAC4 soap_get_ns1__wfExecutor(struct soap*, ns1__wfExecutor *, const char*, const char*);

#ifndef soap_read_ns1__wfExecutor
#define soap_read_ns1__wfExecutor(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__wfExecutor(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__wfExecutor * SOAP_FMAC2 soap_instantiate_ns1__wfExecutor(struct soap*, int, const char*, const char*, size_t*);

inline ns1__wfExecutor * soap_new_ns1__wfExecutor(struct soap *soap, int n = -1) { return soap_instantiate_ns1__wfExecutor(soap, n, NULL, NULL, NULL); }

inline ns1__wfExecutor * soap_new_req_ns1__wfExecutor(struct soap *soap) { ns1__wfExecutor *_p = soap_instantiate_ns1__wfExecutor(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__wfExecutor * soap_new_set_ns1__wfExecutor(struct soap *soap, wchar_t *executorClassName, LONG64 *id1, LONG64 *version1, wchar_t *name1, wchar_t *description1, wchar_t *fullName1, time_t *createDate1, char *__item4) { ns1__wfExecutor *_p = soap_instantiate_ns1__wfExecutor(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__wfExecutor::executorClassName = executorClassName; _p->ns1__executor::id = id1; _p->ns1__executor::version = version1; _p->ns1__executor::name = name1; _p->ns1__executor::description = description1; _p->ns1__executor::fullName = fullName1; _p->ns1__executor::createDate = createDate1; _p->xsd__anyType::__item = __item4; } return _p; }

inline void soap_delete_ns1__wfExecutor(struct soap *soap, ns1__wfExecutor *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__wfExecutor(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__identifiable
#define SOAP_TYPE_ns1__identifiable (30)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__identifiable(struct soap*, const char*, int, const ns1__identifiable *, const char*);
SOAP_FMAC3 ns1__identifiable * SOAP_FMAC4 soap_in_ns1__identifiable(struct soap*, const char*, ns1__identifiable *, const char*);

#ifndef soap_write_ns1__identifiable
#define soap_write_ns1__identifiable(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:identifiable", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__identifiable * SOAP_FMAC4 soap_get_ns1__identifiable(struct soap*, ns1__identifiable *, const char*, const char*);

#ifndef soap_read_ns1__identifiable
#define soap_read_ns1__identifiable(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__identifiable(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__identifiable * SOAP_FMAC2 soap_instantiate_ns1__identifiable(struct soap*, int, const char*, const char*, size_t*);

inline ns1__identifiable * soap_new_ns1__identifiable(struct soap *soap, int n = -1) { return soap_instantiate_ns1__identifiable(soap, n, NULL, NULL, NULL); }

inline ns1__identifiable * soap_new_req_ns1__identifiable(struct soap *soap) { ns1__identifiable *_p = soap_instantiate_ns1__identifiable(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__identifiable * soap_new_set_ns1__identifiable(struct soap *soap, char *__item1) { ns1__identifiable *_p = soap_instantiate_ns1__identifiable(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__identifiable(struct soap *soap, ns1__identifiable *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__identifiable(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__identifiableBase
#define SOAP_TYPE_ns1__identifiableBase (29)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__identifiableBase(struct soap*, const char*, int, const ns1__identifiableBase *, const char*);
SOAP_FMAC3 ns1__identifiableBase * SOAP_FMAC4 soap_in_ns1__identifiableBase(struct soap*, const char*, ns1__identifiableBase *, const char*);

#ifndef soap_write_ns1__identifiableBase
#define soap_write_ns1__identifiableBase(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:identifiableBase", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__identifiableBase * SOAP_FMAC4 soap_get_ns1__identifiableBase(struct soap*, ns1__identifiableBase *, const char*, const char*);

#ifndef soap_read_ns1__identifiableBase
#define soap_read_ns1__identifiableBase(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__identifiableBase(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__identifiableBase * SOAP_FMAC2 soap_instantiate_ns1__identifiableBase(struct soap*, int, const char*, const char*, size_t*);

inline ns1__identifiableBase * soap_new_ns1__identifiableBase(struct soap *soap, int n = -1) { return soap_instantiate_ns1__identifiableBase(soap, n, NULL, NULL, NULL); }

inline ns1__identifiableBase * soap_new_req_ns1__identifiableBase(struct soap *soap) { ns1__identifiableBase *_p = soap_instantiate_ns1__identifiableBase(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__identifiableBase * soap_new_set_ns1__identifiableBase(struct soap *soap, char *__item2) { ns1__identifiableBase *_p = soap_instantiate_ns1__identifiableBase(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_ns1__identifiableBase(struct soap *soap, ns1__identifiableBase *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__identifiableBase(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__executor
#define SOAP_TYPE_ns1__executor (28)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executor(struct soap*, const char*, int, const ns1__executor *, const char*);
SOAP_FMAC3 ns1__executor * SOAP_FMAC4 soap_in_ns1__executor(struct soap*, const char*, ns1__executor *, const char*);

#ifndef soap_write_ns1__executor
#define soap_write_ns1__executor(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:executor", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__executor * SOAP_FMAC4 soap_get_ns1__executor(struct soap*, ns1__executor *, const char*, const char*);

#ifndef soap_read_ns1__executor
#define soap_read_ns1__executor(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__executor(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__executor * SOAP_FMAC2 soap_instantiate_ns1__executor(struct soap*, int, const char*, const char*, size_t*);

inline ns1__executor * soap_new_ns1__executor(struct soap *soap, int n = -1) { return soap_instantiate_ns1__executor(soap, n, NULL, NULL, NULL); }

inline ns1__executor * soap_new_req_ns1__executor(struct soap *soap) { ns1__executor *_p = soap_instantiate_ns1__executor(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__executor * soap_new_set_ns1__executor(struct soap *soap, LONG64 *id, LONG64 *version, wchar_t *name, wchar_t *description, wchar_t *fullName, time_t *createDate, char *__item3) { ns1__executor *_p = soap_instantiate_ns1__executor(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__executor::id = id; _p->ns1__executor::version = version; _p->ns1__executor::name = name; _p->ns1__executor::description = description; _p->ns1__executor::fullName = fullName; _p->ns1__executor::createDate = createDate; _p->xsd__anyType::__item = __item3; } return _p; }

inline void soap_delete_ns1__executor(struct soap *soap, ns1__executor *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__executor(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__actor
#define SOAP_TYPE_ns1__actor (27)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__actor(struct soap*, const char*, int, const ns1__actor *, const char*);
SOAP_FMAC3 ns1__actor * SOAP_FMAC4 soap_in_ns1__actor(struct soap*, const char*, ns1__actor *, const char*);

#ifndef soap_write_ns1__actor
#define soap_write_ns1__actor(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:actor", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__actor * SOAP_FMAC4 soap_get_ns1__actor(struct soap*, ns1__actor *, const char*, const char*);

#ifndef soap_read_ns1__actor
#define soap_read_ns1__actor(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__actor(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__actor * SOAP_FMAC2 soap_instantiate_ns1__actor(struct soap*, int, const char*, const char*, size_t*);

inline ns1__actor * soap_new_ns1__actor(struct soap *soap, int n = -1) { return soap_instantiate_ns1__actor(soap, n, NULL, NULL, NULL); }

inline ns1__actor * soap_new_req_ns1__actor(struct soap *soap, bool active) { ns1__actor *_p = soap_instantiate_ns1__actor(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__actor::active = active; } return _p; }

inline ns1__actor * soap_new_set_ns1__actor(struct soap *soap, LONG64 *code, bool active, wchar_t *email, wchar_t *phone, LONG64 *id1, LONG64 *version1, wchar_t *name1, wchar_t *description1, wchar_t *fullName1, time_t *createDate1, char *__item4) { ns1__actor *_p = soap_instantiate_ns1__actor(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__actor::code = code; _p->ns1__actor::active = active; _p->ns1__actor::email = email; _p->ns1__actor::phone = phone; _p->ns1__executor::id = id1; _p->ns1__executor::version = version1; _p->ns1__executor::name = name1; _p->ns1__executor::description = description1; _p->ns1__executor::fullName = fullName1; _p->ns1__executor::createDate = createDate1; _p->xsd__anyType::__item = __item4; } return _p; }

inline void soap_delete_ns1__actor(struct soap *soap, ns1__actor *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__actor(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__user
#define SOAP_TYPE_ns1__user (26)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__user(struct soap*, const char*, int, const ns1__user *, const char*);
SOAP_FMAC3 ns1__user * SOAP_FMAC4 soap_in_ns1__user(struct soap*, const char*, ns1__user *, const char*);

#ifndef soap_write_ns1__user
#define soap_write_ns1__user(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:user", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__user * SOAP_FMAC4 soap_get_ns1__user(struct soap*, ns1__user *, const char*, const char*);

#ifndef soap_read_ns1__user
#define soap_read_ns1__user(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__user(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__user * SOAP_FMAC2 soap_instantiate_ns1__user(struct soap*, int, const char*, const char*, size_t*);

inline ns1__user * soap_new_ns1__user(struct soap *soap, int n = -1) { return soap_instantiate_ns1__user(soap, n, NULL, NULL, NULL); }

inline ns1__user * soap_new_req_ns1__user(struct soap *soap) { ns1__user *_p = soap_instantiate_ns1__user(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__user * soap_new_set_ns1__user(struct soap *soap, ns1__actor *actor, xsd__base64Binary *securedKey, char *__item1) { ns1__user *_p = soap_instantiate_ns1__user(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__user::actor = actor; _p->ns1__user::securedKey = securedKey; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__user(struct soap *soap, ns1__user *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__user(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__authenticateByKerberosResponse
#define SOAP_TYPE_ns1__authenticateByKerberosResponse (25)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__authenticateByKerberosResponse(struct soap*, const char*, int, const ns1__authenticateByKerberosResponse *, const char*);
SOAP_FMAC3 ns1__authenticateByKerberosResponse * SOAP_FMAC4 soap_in_ns1__authenticateByKerberosResponse(struct soap*, const char*, ns1__authenticateByKerberosResponse *, const char*);

#ifndef soap_write_ns1__authenticateByKerberosResponse
#define soap_write_ns1__authenticateByKerberosResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:authenticateByKerberosResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__authenticateByKerberosResponse * SOAP_FMAC4 soap_get_ns1__authenticateByKerberosResponse(struct soap*, ns1__authenticateByKerberosResponse *, const char*, const char*);

#ifndef soap_read_ns1__authenticateByKerberosResponse
#define soap_read_ns1__authenticateByKerberosResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__authenticateByKerberosResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__authenticateByKerberosResponse * SOAP_FMAC2 soap_instantiate_ns1__authenticateByKerberosResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__authenticateByKerberosResponse * soap_new_ns1__authenticateByKerberosResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__authenticateByKerberosResponse(soap, n, NULL, NULL, NULL); }

inline ns1__authenticateByKerberosResponse * soap_new_req_ns1__authenticateByKerberosResponse(struct soap *soap) { ns1__authenticateByKerberosResponse *_p = soap_instantiate_ns1__authenticateByKerberosResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__authenticateByKerberosResponse * soap_new_set_ns1__authenticateByKerberosResponse(struct soap *soap, ns1__user *result, char *__item1) { ns1__authenticateByKerberosResponse *_p = soap_instantiate_ns1__authenticateByKerberosResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__authenticateByKerberosResponse::result = result; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__authenticateByKerberosResponse(struct soap *soap, ns1__authenticateByKerberosResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__authenticateByKerberosResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__authenticateByKerberos
#define SOAP_TYPE_ns1__authenticateByKerberos (24)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__authenticateByKerberos(struct soap*, const char*, int, const ns1__authenticateByKerberos *, const char*);
SOAP_FMAC3 ns1__authenticateByKerberos * SOAP_FMAC4 soap_in_ns1__authenticateByKerberos(struct soap*, const char*, ns1__authenticateByKerberos *, const char*);

#ifndef soap_write_ns1__authenticateByKerberos
#define soap_write_ns1__authenticateByKerberos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:authenticateByKerberos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__authenticateByKerberos * SOAP_FMAC4 soap_get_ns1__authenticateByKerberos(struct soap*, ns1__authenticateByKerberos *, const char*, const char*);

#ifndef soap_read_ns1__authenticateByKerberos
#define soap_read_ns1__authenticateByKerberos(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__authenticateByKerberos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__authenticateByKerberos * SOAP_FMAC2 soap_instantiate_ns1__authenticateByKerberos(struct soap*, int, const char*, const char*, size_t*);

inline ns1__authenticateByKerberos * soap_new_ns1__authenticateByKerberos(struct soap *soap, int n = -1) { return soap_instantiate_ns1__authenticateByKerberos(soap, n, NULL, NULL, NULL); }

inline ns1__authenticateByKerberos * soap_new_req_ns1__authenticateByKerberos(struct soap *soap) { ns1__authenticateByKerberos *_p = soap_instantiate_ns1__authenticateByKerberos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__authenticateByKerberos * soap_new_set_ns1__authenticateByKerberos(struct soap *soap, xsd__base64Binary *token, char *__item1) { ns1__authenticateByKerberos *_p = soap_instantiate_ns1__authenticateByKerberos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__authenticateByKerberos::token = token; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__authenticateByKerberos(struct soap *soap, ns1__authenticateByKerberos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__authenticateByKerberos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (21)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap*, const char*, int, const xsd__string *, const char*);
SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_in_xsd__string(struct soap*, const char*, xsd__string *, const char*);

#ifndef soap_write_xsd__string
#define soap_write_xsd__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_get_xsd__string(struct soap*, xsd__string *, const char*, const char*);

#ifndef soap_read_xsd__string
#define soap_read_xsd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__string * SOAP_FMAC2 soap_instantiate_xsd__string(struct soap*, int, const char*, const char*, size_t*);

inline xsd__string * soap_new_xsd__string(struct soap *soap, int n = -1) { return soap_instantiate_xsd__string(soap, n, NULL, NULL, NULL); }

inline xsd__string * soap_new_req_xsd__string(struct soap *soap) { xsd__string *_p = soap_instantiate_xsd__string(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xsd__string * soap_new_set_xsd__string(struct soap *soap, wchar_t *__item, char *__item1) { xsd__string *_p = soap_instantiate_xsd__string(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__string::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__string(struct soap *soap, xsd__string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__long
#define SOAP_TYPE_xsd__long (19)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__long(struct soap*, const char*, int, const xsd__long *, const char*);
SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_in_xsd__long(struct soap*, const char*, xsd__long *, const char*);

#ifndef soap_write_xsd__long
#define soap_write_xsd__long(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:long", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_get_xsd__long(struct soap*, xsd__long *, const char*, const char*);

#ifndef soap_read_xsd__long
#define soap_read_xsd__long(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__long(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__long * SOAP_FMAC2 soap_instantiate_xsd__long(struct soap*, int, const char*, const char*, size_t*);

inline xsd__long * soap_new_xsd__long(struct soap *soap, int n = -1) { return soap_instantiate_xsd__long(soap, n, NULL, NULL, NULL); }

inline xsd__long * soap_new_req_xsd__long(struct soap *soap, LONG64 __item) { xsd__long *_p = soap_instantiate_xsd__long(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__long::__item = __item; } return _p; }

inline xsd__long * soap_new_set_xsd__long(struct soap *soap, LONG64 __item, char *__item1) { xsd__long *_p = soap_instantiate_xsd__long(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__long::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__long(struct soap *soap, xsd__long *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__long(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__int
#define SOAP_TYPE_xsd__int (18)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap*, const char*, int, const xsd__int *, const char*);
SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_in_xsd__int(struct soap*, const char*, xsd__int *, const char*);

#ifndef soap_write_xsd__int
#define soap_write_xsd__int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_get_xsd__int(struct soap*, xsd__int *, const char*, const char*);

#ifndef soap_read_xsd__int
#define soap_read_xsd__int(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__int * SOAP_FMAC2 soap_instantiate_xsd__int(struct soap*, int, const char*, const char*, size_t*);

inline xsd__int * soap_new_xsd__int(struct soap *soap, int n = -1) { return soap_instantiate_xsd__int(soap, n, NULL, NULL, NULL); }

inline xsd__int * soap_new_req_xsd__int(struct soap *soap, int __item) { xsd__int *_p = soap_instantiate_xsd__int(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__int::__item = __item; } return _p; }

inline xsd__int * soap_new_set_xsd__int(struct soap *soap, int __item, char *__item1) { xsd__int *_p = soap_instantiate_xsd__int(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__int::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__int(struct soap *soap, xsd__int *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__int(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__dateTime
#define SOAP_TYPE_xsd__dateTime (16)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__dateTime(struct soap*, const char*, int, const xsd__dateTime *, const char*);
SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_in_xsd__dateTime(struct soap*, const char*, xsd__dateTime *, const char*);

#ifndef soap_write_xsd__dateTime
#define soap_write_xsd__dateTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:dateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_get_xsd__dateTime(struct soap*, xsd__dateTime *, const char*, const char*);

#ifndef soap_read_xsd__dateTime
#define soap_read_xsd__dateTime(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__dateTime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__dateTime * SOAP_FMAC2 soap_instantiate_xsd__dateTime(struct soap*, int, const char*, const char*, size_t*);

inline xsd__dateTime * soap_new_xsd__dateTime(struct soap *soap, int n = -1) { return soap_instantiate_xsd__dateTime(soap, n, NULL, NULL, NULL); }

inline xsd__dateTime * soap_new_req_xsd__dateTime(struct soap *soap, time_t __item) { xsd__dateTime *_p = soap_instantiate_xsd__dateTime(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__dateTime::__item = __item; } return _p; }

inline xsd__dateTime * soap_new_set_xsd__dateTime(struct soap *soap, time_t __item, char *__item1) { xsd__dateTime *_p = soap_instantiate_xsd__dateTime(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__dateTime::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__dateTime(struct soap *soap, xsd__dateTime *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__dateTime(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__boolean
#define SOAP_TYPE_xsd__boolean (14)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap*, const char*, int, const xsd__boolean *, const char*);
SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_in_xsd__boolean(struct soap*, const char*, xsd__boolean *, const char*);

#ifndef soap_write_xsd__boolean
#define soap_write_xsd__boolean(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_get_xsd__boolean(struct soap*, xsd__boolean *, const char*, const char*);

#ifndef soap_read_xsd__boolean
#define soap_read_xsd__boolean(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__boolean(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__boolean * SOAP_FMAC2 soap_instantiate_xsd__boolean(struct soap*, int, const char*, const char*, size_t*);

inline xsd__boolean * soap_new_xsd__boolean(struct soap *soap, int n = -1) { return soap_instantiate_xsd__boolean(soap, n, NULL, NULL, NULL); }

inline xsd__boolean * soap_new_req_xsd__boolean(struct soap *soap, bool __item) { xsd__boolean *_p = soap_instantiate_xsd__boolean(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__boolean::__item = __item; } return _p; }

inline xsd__boolean * soap_new_set_xsd__boolean(struct soap *soap, bool __item, char *__item1) { xsd__boolean *_p = soap_instantiate_xsd__boolean(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__boolean::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__boolean(struct soap *soap, xsd__boolean *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__boolean(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__base64Binary_
#define SOAP_TYPE_xsd__base64Binary_ (13)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary_(struct soap*, const char*, int, const xsd__base64Binary_ *, const char*);
SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_in_xsd__base64Binary_(struct soap*, const char*, xsd__base64Binary_ *, const char*);

#ifndef soap_write_xsd__base64Binary_
#define soap_write_xsd__base64Binary_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:base64Binary", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_get_xsd__base64Binary_(struct soap*, xsd__base64Binary_ *, const char*, const char*);

#ifndef soap_read_xsd__base64Binary_
#define soap_read_xsd__base64Binary_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__base64Binary_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__base64Binary_ * SOAP_FMAC2 soap_instantiate_xsd__base64Binary_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary_ * soap_new_xsd__base64Binary_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__base64Binary_(soap, n, NULL, NULL, NULL); }

inline xsd__base64Binary_ * soap_new_req_xsd__base64Binary_(struct soap *soap, xsd__base64Binary& __item) { xsd__base64Binary_ *_p = soap_instantiate_xsd__base64Binary_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__base64Binary_::__item = __item; } return _p; }

inline xsd__base64Binary_ * soap_new_set_xsd__base64Binary_(struct soap *soap, xsd__base64Binary& __item, char *__item1) { xsd__base64Binary_ *_p = soap_instantiate_xsd__base64Binary_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__base64Binary_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__base64Binary_(struct soap *soap, xsd__base64Binary_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (9)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);

#ifndef soap_write_xsd__base64Binary
#define soap_write_xsd__base64Binary(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:base64Binary", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

#ifndef soap_read_xsd__base64Binary
#define soap_read_xsd__base64Binary(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__base64Binary(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1) { return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL); }

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(struct soap *soap) { xsd__base64Binary *_p = soap_instantiate_xsd__base64Binary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(struct soap *soap, unsigned char *__ptr, int __size, char *id, char *type, char *options) { xsd__base64Binary *_p = soap_instantiate_xsd__base64Binary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__base64Binary::__ptr = __ptr; _p->xsd__base64Binary::__size = __size; _p->xsd__base64Binary::id = id; _p->xsd__base64Binary::type = type; _p->xsd__base64Binary::options = options; } return _p; }

inline void soap_delete_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (7)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap*, const char*, int, const xsd__anyType *, const char*);
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap*, const char*, xsd__anyType *, const char*);

#ifndef soap_write_xsd__anyType
#define soap_write_xsd__anyType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:anyType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap*, xsd__anyType *, const char*, const char*);

#ifndef soap_read_xsd__anyType
#define soap_read_xsd__anyType(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__anyType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyType * soap_new_xsd__anyType(struct soap *soap, int n = -1) { return soap_instantiate_xsd__anyType(soap, n, NULL, NULL, NULL); }

inline xsd__anyType * soap_new_req_xsd__anyType(struct soap *soap) { xsd__anyType *_p = soap_instantiate_xsd__anyType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xsd__anyType * soap_new_set_xsd__anyType(struct soap *soap, char *__item) { xsd__anyType *_p = soap_instantiate_xsd__anyType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__anyType::__item = __item; } return _p; }

inline void soap_delete_xsd__anyType(struct soap *soap, xsd__anyType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (151)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data),0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (150)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data),0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (147)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data),0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (145)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data),0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (144)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data),0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE___ns1__getTask
#define SOAP_TYPE___ns1__getTask (143)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getTask(struct soap*, struct __ns1__getTask *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getTask(struct soap*, const struct __ns1__getTask *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getTask(struct soap*, const char*, int, const struct __ns1__getTask *, const char*);
SOAP_FMAC3 struct __ns1__getTask * SOAP_FMAC4 soap_in___ns1__getTask(struct soap*, const char*, struct __ns1__getTask *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getTask(struct soap*, const struct __ns1__getTask *, const char*, const char*);

#ifndef soap_write___ns1__getTask
#define soap_write___ns1__getTask(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getTask(soap, data),0) || soap_put___ns1__getTask(soap, data, "-ns1:getTask", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getTask * SOAP_FMAC4 soap_get___ns1__getTask(struct soap*, struct __ns1__getTask *, const char*, const char*);

#ifndef soap_read___ns1__getTask
#define soap_read___ns1__getTask(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getTask(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getTask * SOAP_FMAC2 soap_instantiate___ns1__getTask(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getTask * soap_new___ns1__getTask(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getTask(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getTask * soap_new_req___ns1__getTask(struct soap *soap) { struct __ns1__getTask *_p = soap_instantiate___ns1__getTask(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getTask(soap, _p); } return _p; }

inline struct __ns1__getTask * soap_new_set___ns1__getTask(struct soap *soap, ns1__getTask *ns1__getTask_) { struct __ns1__getTask *_p = soap_instantiate___ns1__getTask(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getTask(soap, _p); _p->ns1__getTask_ = ns1__getTask_; } return _p; }

inline void soap_delete___ns1__getTask(struct soap *soap, struct __ns1__getTask *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getTask(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__assignTask
#define SOAP_TYPE___ns1__assignTask (139)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__assignTask(struct soap*, struct __ns1__assignTask *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__assignTask(struct soap*, const struct __ns1__assignTask *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__assignTask(struct soap*, const char*, int, const struct __ns1__assignTask *, const char*);
SOAP_FMAC3 struct __ns1__assignTask * SOAP_FMAC4 soap_in___ns1__assignTask(struct soap*, const char*, struct __ns1__assignTask *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__assignTask(struct soap*, const struct __ns1__assignTask *, const char*, const char*);

#ifndef soap_write___ns1__assignTask
#define soap_write___ns1__assignTask(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__assignTask(soap, data),0) || soap_put___ns1__assignTask(soap, data, "-ns1:assignTask", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__assignTask * SOAP_FMAC4 soap_get___ns1__assignTask(struct soap*, struct __ns1__assignTask *, const char*, const char*);

#ifndef soap_read___ns1__assignTask
#define soap_read___ns1__assignTask(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__assignTask(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__assignTask * SOAP_FMAC2 soap_instantiate___ns1__assignTask(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__assignTask * soap_new___ns1__assignTask(struct soap *soap, int n = -1) { return soap_instantiate___ns1__assignTask(soap, n, NULL, NULL, NULL); }

inline struct __ns1__assignTask * soap_new_req___ns1__assignTask(struct soap *soap) { struct __ns1__assignTask *_p = soap_instantiate___ns1__assignTask(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__assignTask(soap, _p); } return _p; }

inline struct __ns1__assignTask * soap_new_set___ns1__assignTask(struct soap *soap, ns1__assignTask *ns1__assignTask_) { struct __ns1__assignTask *_p = soap_instantiate___ns1__assignTask(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__assignTask(soap, _p); _p->ns1__assignTask_ = ns1__assignTask_; } return _p; }

inline void soap_delete___ns1__assignTask(struct soap *soap, struct __ns1__assignTask *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__assignTask(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__assignTaskResponse
#define SOAP_TYPE___ns1__assignTaskResponse (138)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__assignTaskResponse(struct soap*, struct __ns1__assignTaskResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__assignTaskResponse(struct soap*, const struct __ns1__assignTaskResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__assignTaskResponse(struct soap*, const char*, int, const struct __ns1__assignTaskResponse *, const char*);
SOAP_FMAC3 struct __ns1__assignTaskResponse * SOAP_FMAC4 soap_in___ns1__assignTaskResponse(struct soap*, const char*, struct __ns1__assignTaskResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__assignTaskResponse(struct soap*, const struct __ns1__assignTaskResponse *, const char*, const char*);

#ifndef soap_write___ns1__assignTaskResponse
#define soap_write___ns1__assignTaskResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__assignTaskResponse(soap, data),0) || soap_put___ns1__assignTaskResponse(soap, data, "-ns1:assignTaskResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__assignTaskResponse * SOAP_FMAC4 soap_get___ns1__assignTaskResponse(struct soap*, struct __ns1__assignTaskResponse *, const char*, const char*);

#ifndef soap_read___ns1__assignTaskResponse
#define soap_read___ns1__assignTaskResponse(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__assignTaskResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__assignTaskResponse * SOAP_FMAC2 soap_instantiate___ns1__assignTaskResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__assignTaskResponse * soap_new___ns1__assignTaskResponse(struct soap *soap, int n = -1) { return soap_instantiate___ns1__assignTaskResponse(soap, n, NULL, NULL, NULL); }

inline struct __ns1__assignTaskResponse * soap_new_req___ns1__assignTaskResponse(struct soap *soap) { struct __ns1__assignTaskResponse *_p = soap_instantiate___ns1__assignTaskResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__assignTaskResponse(soap, _p); } return _p; }

inline struct __ns1__assignTaskResponse * soap_new_set___ns1__assignTaskResponse(struct soap *soap, ns1__assignTaskResponse *ns1__assignTaskResponse_) { struct __ns1__assignTaskResponse *_p = soap_instantiate___ns1__assignTaskResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__assignTaskResponse(soap, _p); _p->ns1__assignTaskResponse_ = ns1__assignTaskResponse_; } return _p; }

inline void soap_delete___ns1__assignTaskResponse(struct soap *soap, struct __ns1__assignTaskResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__assignTaskResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getProcessTasks
#define SOAP_TYPE___ns1__getProcessTasks (134)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getProcessTasks(struct soap*, struct __ns1__getProcessTasks *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getProcessTasks(struct soap*, const struct __ns1__getProcessTasks *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getProcessTasks(struct soap*, const char*, int, const struct __ns1__getProcessTasks *, const char*);
SOAP_FMAC3 struct __ns1__getProcessTasks * SOAP_FMAC4 soap_in___ns1__getProcessTasks(struct soap*, const char*, struct __ns1__getProcessTasks *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getProcessTasks(struct soap*, const struct __ns1__getProcessTasks *, const char*, const char*);

#ifndef soap_write___ns1__getProcessTasks
#define soap_write___ns1__getProcessTasks(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getProcessTasks(soap, data),0) || soap_put___ns1__getProcessTasks(soap, data, "-ns1:getProcessTasks", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getProcessTasks * SOAP_FMAC4 soap_get___ns1__getProcessTasks(struct soap*, struct __ns1__getProcessTasks *, const char*, const char*);

#ifndef soap_read___ns1__getProcessTasks
#define soap_read___ns1__getProcessTasks(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getProcessTasks(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getProcessTasks * SOAP_FMAC2 soap_instantiate___ns1__getProcessTasks(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getProcessTasks * soap_new___ns1__getProcessTasks(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getProcessTasks(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getProcessTasks * soap_new_req___ns1__getProcessTasks(struct soap *soap) { struct __ns1__getProcessTasks *_p = soap_instantiate___ns1__getProcessTasks(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getProcessTasks(soap, _p); } return _p; }

inline struct __ns1__getProcessTasks * soap_new_set___ns1__getProcessTasks(struct soap *soap, ns1__getProcessTasks *ns1__getProcessTasks_) { struct __ns1__getProcessTasks *_p = soap_instantiate___ns1__getProcessTasks(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getProcessTasks(soap, _p); _p->ns1__getProcessTasks_ = ns1__getProcessTasks_; } return _p; }

inline void soap_delete___ns1__getProcessTasks(struct soap *soap, struct __ns1__getProcessTasks *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getProcessTasks(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__completeTaskWS
#define SOAP_TYPE___ns1__completeTaskWS (130)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__completeTaskWS(struct soap*, struct __ns1__completeTaskWS *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__completeTaskWS(struct soap*, const struct __ns1__completeTaskWS *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__completeTaskWS(struct soap*, const char*, int, const struct __ns1__completeTaskWS *, const char*);
SOAP_FMAC3 struct __ns1__completeTaskWS * SOAP_FMAC4 soap_in___ns1__completeTaskWS(struct soap*, const char*, struct __ns1__completeTaskWS *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__completeTaskWS(struct soap*, const struct __ns1__completeTaskWS *, const char*, const char*);

#ifndef soap_write___ns1__completeTaskWS
#define soap_write___ns1__completeTaskWS(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__completeTaskWS(soap, data),0) || soap_put___ns1__completeTaskWS(soap, data, "-ns1:completeTaskWS", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__completeTaskWS * SOAP_FMAC4 soap_get___ns1__completeTaskWS(struct soap*, struct __ns1__completeTaskWS *, const char*, const char*);

#ifndef soap_read___ns1__completeTaskWS
#define soap_read___ns1__completeTaskWS(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__completeTaskWS(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__completeTaskWS * SOAP_FMAC2 soap_instantiate___ns1__completeTaskWS(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__completeTaskWS * soap_new___ns1__completeTaskWS(struct soap *soap, int n = -1) { return soap_instantiate___ns1__completeTaskWS(soap, n, NULL, NULL, NULL); }

inline struct __ns1__completeTaskWS * soap_new_req___ns1__completeTaskWS(struct soap *soap) { struct __ns1__completeTaskWS *_p = soap_instantiate___ns1__completeTaskWS(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__completeTaskWS(soap, _p); } return _p; }

inline struct __ns1__completeTaskWS * soap_new_set___ns1__completeTaskWS(struct soap *soap, ns1__completeTaskWS *ns1__completeTaskWS_) { struct __ns1__completeTaskWS *_p = soap_instantiate___ns1__completeTaskWS(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__completeTaskWS(soap, _p); _p->ns1__completeTaskWS_ = ns1__completeTaskWS_; } return _p; }

inline void soap_delete___ns1__completeTaskWS(struct soap *soap, struct __ns1__completeTaskWS *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__completeTaskWS(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__completeTaskWSResponse
#define SOAP_TYPE___ns1__completeTaskWSResponse (129)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__completeTaskWSResponse(struct soap*, struct __ns1__completeTaskWSResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__completeTaskWSResponse(struct soap*, const struct __ns1__completeTaskWSResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__completeTaskWSResponse(struct soap*, const char*, int, const struct __ns1__completeTaskWSResponse *, const char*);
SOAP_FMAC3 struct __ns1__completeTaskWSResponse * SOAP_FMAC4 soap_in___ns1__completeTaskWSResponse(struct soap*, const char*, struct __ns1__completeTaskWSResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__completeTaskWSResponse(struct soap*, const struct __ns1__completeTaskWSResponse *, const char*, const char*);

#ifndef soap_write___ns1__completeTaskWSResponse
#define soap_write___ns1__completeTaskWSResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__completeTaskWSResponse(soap, data),0) || soap_put___ns1__completeTaskWSResponse(soap, data, "-ns1:completeTaskWSResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__completeTaskWSResponse * SOAP_FMAC4 soap_get___ns1__completeTaskWSResponse(struct soap*, struct __ns1__completeTaskWSResponse *, const char*, const char*);

#ifndef soap_read___ns1__completeTaskWSResponse
#define soap_read___ns1__completeTaskWSResponse(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__completeTaskWSResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__completeTaskWSResponse * SOAP_FMAC2 soap_instantiate___ns1__completeTaskWSResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__completeTaskWSResponse * soap_new___ns1__completeTaskWSResponse(struct soap *soap, int n = -1) { return soap_instantiate___ns1__completeTaskWSResponse(soap, n, NULL, NULL, NULL); }

inline struct __ns1__completeTaskWSResponse * soap_new_req___ns1__completeTaskWSResponse(struct soap *soap) { struct __ns1__completeTaskWSResponse *_p = soap_instantiate___ns1__completeTaskWSResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__completeTaskWSResponse(soap, _p); } return _p; }

inline struct __ns1__completeTaskWSResponse * soap_new_set___ns1__completeTaskWSResponse(struct soap *soap, ns1__completeTaskWSResponse *ns1__completeTaskWSResponse_) { struct __ns1__completeTaskWSResponse *_p = soap_instantiate___ns1__completeTaskWSResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__completeTaskWSResponse(soap, _p); _p->ns1__completeTaskWSResponse_ = ns1__completeTaskWSResponse_; } return _p; }

inline void soap_delete___ns1__completeTaskWSResponse(struct soap *soap, struct __ns1__completeTaskWSResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__completeTaskWSResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getTasks
#define SOAP_TYPE___ns1__getTasks (125)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getTasks(struct soap*, struct __ns1__getTasks *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getTasks(struct soap*, const struct __ns1__getTasks *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getTasks(struct soap*, const char*, int, const struct __ns1__getTasks *, const char*);
SOAP_FMAC3 struct __ns1__getTasks * SOAP_FMAC4 soap_in___ns1__getTasks(struct soap*, const char*, struct __ns1__getTasks *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getTasks(struct soap*, const struct __ns1__getTasks *, const char*, const char*);

#ifndef soap_write___ns1__getTasks
#define soap_write___ns1__getTasks(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getTasks(soap, data),0) || soap_put___ns1__getTasks(soap, data, "-ns1:getTasks", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getTasks * SOAP_FMAC4 soap_get___ns1__getTasks(struct soap*, struct __ns1__getTasks *, const char*, const char*);

#ifndef soap_read___ns1__getTasks
#define soap_read___ns1__getTasks(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getTasks(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getTasks * SOAP_FMAC2 soap_instantiate___ns1__getTasks(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getTasks * soap_new___ns1__getTasks(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getTasks(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getTasks * soap_new_req___ns1__getTasks(struct soap *soap) { struct __ns1__getTasks *_p = soap_instantiate___ns1__getTasks(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getTasks(soap, _p); } return _p; }

inline struct __ns1__getTasks * soap_new_set___ns1__getTasks(struct soap *soap, ns1__getTasks *ns1__getTasks_) { struct __ns1__getTasks *_p = soap_instantiate___ns1__getTasks(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getTasks(soap, _p); _p->ns1__getTasks_ = ns1__getTasks_; } return _p; }

inline void soap_delete___ns1__getTasks(struct soap *soap, struct __ns1__getTasks *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getTasks(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__reassignTasks
#define SOAP_TYPE___ns1__reassignTasks (121)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__reassignTasks(struct soap*, struct __ns1__reassignTasks *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__reassignTasks(struct soap*, const struct __ns1__reassignTasks *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__reassignTasks(struct soap*, const char*, int, const struct __ns1__reassignTasks *, const char*);
SOAP_FMAC3 struct __ns1__reassignTasks * SOAP_FMAC4 soap_in___ns1__reassignTasks(struct soap*, const char*, struct __ns1__reassignTasks *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__reassignTasks(struct soap*, const struct __ns1__reassignTasks *, const char*, const char*);

#ifndef soap_write___ns1__reassignTasks
#define soap_write___ns1__reassignTasks(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__reassignTasks(soap, data),0) || soap_put___ns1__reassignTasks(soap, data, "-ns1:reassignTasks", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__reassignTasks * SOAP_FMAC4 soap_get___ns1__reassignTasks(struct soap*, struct __ns1__reassignTasks *, const char*, const char*);

#ifndef soap_read___ns1__reassignTasks
#define soap_read___ns1__reassignTasks(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__reassignTasks(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__reassignTasks * SOAP_FMAC2 soap_instantiate___ns1__reassignTasks(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__reassignTasks * soap_new___ns1__reassignTasks(struct soap *soap, int n = -1) { return soap_instantiate___ns1__reassignTasks(soap, n, NULL, NULL, NULL); }

inline struct __ns1__reassignTasks * soap_new_req___ns1__reassignTasks(struct soap *soap) { struct __ns1__reassignTasks *_p = soap_instantiate___ns1__reassignTasks(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__reassignTasks(soap, _p); } return _p; }

inline struct __ns1__reassignTasks * soap_new_set___ns1__reassignTasks(struct soap *soap, ns1__reassignTasks *ns1__reassignTasks_) { struct __ns1__reassignTasks *_p = soap_instantiate___ns1__reassignTasks(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__reassignTasks(soap, _p); _p->ns1__reassignTasks_ = ns1__reassignTasks_; } return _p; }

inline void soap_delete___ns1__reassignTasks(struct soap *soap, struct __ns1__reassignTasks *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__reassignTasks(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__reassignTask
#define SOAP_TYPE___ns1__reassignTask (117)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__reassignTask(struct soap*, struct __ns1__reassignTask *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__reassignTask(struct soap*, const struct __ns1__reassignTask *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__reassignTask(struct soap*, const char*, int, const struct __ns1__reassignTask *, const char*);
SOAP_FMAC3 struct __ns1__reassignTask * SOAP_FMAC4 soap_in___ns1__reassignTask(struct soap*, const char*, struct __ns1__reassignTask *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__reassignTask(struct soap*, const struct __ns1__reassignTask *, const char*, const char*);

#ifndef soap_write___ns1__reassignTask
#define soap_write___ns1__reassignTask(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__reassignTask(soap, data),0) || soap_put___ns1__reassignTask(soap, data, "-ns1:reassignTask", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__reassignTask * SOAP_FMAC4 soap_get___ns1__reassignTask(struct soap*, struct __ns1__reassignTask *, const char*, const char*);

#ifndef soap_read___ns1__reassignTask
#define soap_read___ns1__reassignTask(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__reassignTask(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__reassignTask * SOAP_FMAC2 soap_instantiate___ns1__reassignTask(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__reassignTask * soap_new___ns1__reassignTask(struct soap *soap, int n = -1) { return soap_instantiate___ns1__reassignTask(soap, n, NULL, NULL, NULL); }

inline struct __ns1__reassignTask * soap_new_req___ns1__reassignTask(struct soap *soap) { struct __ns1__reassignTask *_p = soap_instantiate___ns1__reassignTask(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__reassignTask(soap, _p); } return _p; }

inline struct __ns1__reassignTask * soap_new_set___ns1__reassignTask(struct soap *soap, ns1__reassignTask *ns1__reassignTask_) { struct __ns1__reassignTask *_p = soap_instantiate___ns1__reassignTask(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__reassignTask(soap, _p); _p->ns1__reassignTask_ = ns1__reassignTask_; } return _p; }

inline void soap_delete___ns1__reassignTask(struct soap *soap, struct __ns1__reassignTask *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__reassignTask(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__reassignTaskResponse
#define SOAP_TYPE___ns1__reassignTaskResponse (116)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__reassignTaskResponse(struct soap*, struct __ns1__reassignTaskResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__reassignTaskResponse(struct soap*, const struct __ns1__reassignTaskResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__reassignTaskResponse(struct soap*, const char*, int, const struct __ns1__reassignTaskResponse *, const char*);
SOAP_FMAC3 struct __ns1__reassignTaskResponse * SOAP_FMAC4 soap_in___ns1__reassignTaskResponse(struct soap*, const char*, struct __ns1__reassignTaskResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__reassignTaskResponse(struct soap*, const struct __ns1__reassignTaskResponse *, const char*, const char*);

#ifndef soap_write___ns1__reassignTaskResponse
#define soap_write___ns1__reassignTaskResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__reassignTaskResponse(soap, data),0) || soap_put___ns1__reassignTaskResponse(soap, data, "-ns1:reassignTaskResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__reassignTaskResponse * SOAP_FMAC4 soap_get___ns1__reassignTaskResponse(struct soap*, struct __ns1__reassignTaskResponse *, const char*, const char*);

#ifndef soap_read___ns1__reassignTaskResponse
#define soap_read___ns1__reassignTaskResponse(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__reassignTaskResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__reassignTaskResponse * SOAP_FMAC2 soap_instantiate___ns1__reassignTaskResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__reassignTaskResponse * soap_new___ns1__reassignTaskResponse(struct soap *soap, int n = -1) { return soap_instantiate___ns1__reassignTaskResponse(soap, n, NULL, NULL, NULL); }

inline struct __ns1__reassignTaskResponse * soap_new_req___ns1__reassignTaskResponse(struct soap *soap) { struct __ns1__reassignTaskResponse *_p = soap_instantiate___ns1__reassignTaskResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__reassignTaskResponse(soap, _p); } return _p; }

inline struct __ns1__reassignTaskResponse * soap_new_set___ns1__reassignTaskResponse(struct soap *soap, ns1__reassignTaskResponse *ns1__reassignTaskResponse_) { struct __ns1__reassignTaskResponse *_p = soap_instantiate___ns1__reassignTaskResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__reassignTaskResponse(soap, _p); _p->ns1__reassignTaskResponse_ = ns1__reassignTaskResponse_; } return _p; }

inline void soap_delete___ns1__reassignTaskResponse(struct soap *soap, struct __ns1__reassignTaskResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__reassignTaskResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__markTaskOpened
#define SOAP_TYPE___ns1__markTaskOpened (112)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__markTaskOpened(struct soap*, struct __ns1__markTaskOpened *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__markTaskOpened(struct soap*, const struct __ns1__markTaskOpened *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__markTaskOpened(struct soap*, const char*, int, const struct __ns1__markTaskOpened *, const char*);
SOAP_FMAC3 struct __ns1__markTaskOpened * SOAP_FMAC4 soap_in___ns1__markTaskOpened(struct soap*, const char*, struct __ns1__markTaskOpened *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__markTaskOpened(struct soap*, const struct __ns1__markTaskOpened *, const char*, const char*);

#ifndef soap_write___ns1__markTaskOpened
#define soap_write___ns1__markTaskOpened(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__markTaskOpened(soap, data),0) || soap_put___ns1__markTaskOpened(soap, data, "-ns1:markTaskOpened", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__markTaskOpened * SOAP_FMAC4 soap_get___ns1__markTaskOpened(struct soap*, struct __ns1__markTaskOpened *, const char*, const char*);

#ifndef soap_read___ns1__markTaskOpened
#define soap_read___ns1__markTaskOpened(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__markTaskOpened(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__markTaskOpened * SOAP_FMAC2 soap_instantiate___ns1__markTaskOpened(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__markTaskOpened * soap_new___ns1__markTaskOpened(struct soap *soap, int n = -1) { return soap_instantiate___ns1__markTaskOpened(soap, n, NULL, NULL, NULL); }

inline struct __ns1__markTaskOpened * soap_new_req___ns1__markTaskOpened(struct soap *soap) { struct __ns1__markTaskOpened *_p = soap_instantiate___ns1__markTaskOpened(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__markTaskOpened(soap, _p); } return _p; }

inline struct __ns1__markTaskOpened * soap_new_set___ns1__markTaskOpened(struct soap *soap, ns1__markTaskOpened *ns1__markTaskOpened_) { struct __ns1__markTaskOpened *_p = soap_instantiate___ns1__markTaskOpened(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__markTaskOpened(soap, _p); _p->ns1__markTaskOpened_ = ns1__markTaskOpened_; } return _p; }

inline void soap_delete___ns1__markTaskOpened(struct soap *soap, struct __ns1__markTaskOpened *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__markTaskOpened(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__markTaskOpenedResponse
#define SOAP_TYPE___ns1__markTaskOpenedResponse (111)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__markTaskOpenedResponse(struct soap*, struct __ns1__markTaskOpenedResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__markTaskOpenedResponse(struct soap*, const struct __ns1__markTaskOpenedResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__markTaskOpenedResponse(struct soap*, const char*, int, const struct __ns1__markTaskOpenedResponse *, const char*);
SOAP_FMAC3 struct __ns1__markTaskOpenedResponse * SOAP_FMAC4 soap_in___ns1__markTaskOpenedResponse(struct soap*, const char*, struct __ns1__markTaskOpenedResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__markTaskOpenedResponse(struct soap*, const struct __ns1__markTaskOpenedResponse *, const char*, const char*);

#ifndef soap_write___ns1__markTaskOpenedResponse
#define soap_write___ns1__markTaskOpenedResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__markTaskOpenedResponse(soap, data),0) || soap_put___ns1__markTaskOpenedResponse(soap, data, "-ns1:markTaskOpenedResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__markTaskOpenedResponse * SOAP_FMAC4 soap_get___ns1__markTaskOpenedResponse(struct soap*, struct __ns1__markTaskOpenedResponse *, const char*, const char*);

#ifndef soap_read___ns1__markTaskOpenedResponse
#define soap_read___ns1__markTaskOpenedResponse(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__markTaskOpenedResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__markTaskOpenedResponse * SOAP_FMAC2 soap_instantiate___ns1__markTaskOpenedResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__markTaskOpenedResponse * soap_new___ns1__markTaskOpenedResponse(struct soap *soap, int n = -1) { return soap_instantiate___ns1__markTaskOpenedResponse(soap, n, NULL, NULL, NULL); }

inline struct __ns1__markTaskOpenedResponse * soap_new_req___ns1__markTaskOpenedResponse(struct soap *soap) { struct __ns1__markTaskOpenedResponse *_p = soap_instantiate___ns1__markTaskOpenedResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__markTaskOpenedResponse(soap, _p); } return _p; }

inline struct __ns1__markTaskOpenedResponse * soap_new_set___ns1__markTaskOpenedResponse(struct soap *soap, ns1__markTaskOpenedResponse *ns1__markTaskOpenedResponse_) { struct __ns1__markTaskOpenedResponse *_p = soap_instantiate___ns1__markTaskOpenedResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__markTaskOpenedResponse(soap, _p); _p->ns1__markTaskOpenedResponse_ = ns1__markTaskOpenedResponse_; } return _p; }

inline void soap_delete___ns1__markTaskOpenedResponse(struct soap *soap, struct __ns1__markTaskOpenedResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__markTaskOpenedResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getMyTasks
#define SOAP_TYPE___ns1__getMyTasks (107)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getMyTasks(struct soap*, struct __ns1__getMyTasks *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getMyTasks(struct soap*, const struct __ns1__getMyTasks *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getMyTasks(struct soap*, const char*, int, const struct __ns1__getMyTasks *, const char*);
SOAP_FMAC3 struct __ns1__getMyTasks * SOAP_FMAC4 soap_in___ns1__getMyTasks(struct soap*, const char*, struct __ns1__getMyTasks *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getMyTasks(struct soap*, const struct __ns1__getMyTasks *, const char*, const char*);

#ifndef soap_write___ns1__getMyTasks
#define soap_write___ns1__getMyTasks(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getMyTasks(soap, data),0) || soap_put___ns1__getMyTasks(soap, data, "-ns1:getMyTasks", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getMyTasks * SOAP_FMAC4 soap_get___ns1__getMyTasks(struct soap*, struct __ns1__getMyTasks *, const char*, const char*);

#ifndef soap_read___ns1__getMyTasks
#define soap_read___ns1__getMyTasks(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getMyTasks(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getMyTasks * SOAP_FMAC2 soap_instantiate___ns1__getMyTasks(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getMyTasks * soap_new___ns1__getMyTasks(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getMyTasks(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getMyTasks * soap_new_req___ns1__getMyTasks(struct soap *soap) { struct __ns1__getMyTasks *_p = soap_instantiate___ns1__getMyTasks(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getMyTasks(soap, _p); } return _p; }

inline struct __ns1__getMyTasks * soap_new_set___ns1__getMyTasks(struct soap *soap, ns1__getMyTasks *ns1__getMyTasks_) { struct __ns1__getMyTasks *_p = soap_instantiate___ns1__getMyTasks(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getMyTasks(soap, _p); _p->ns1__getMyTasks_ = ns1__getMyTasks_; } return _p; }

inline void soap_delete___ns1__getMyTasks(struct soap *soap, struct __ns1__getMyTasks *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getMyTasks(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__authenticateByCallerPrincipal
#define SOAP_TYPE___ns1__authenticateByCallerPrincipal (103)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__authenticateByCallerPrincipal(struct soap*, struct __ns1__authenticateByCallerPrincipal *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__authenticateByCallerPrincipal(struct soap*, const struct __ns1__authenticateByCallerPrincipal *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__authenticateByCallerPrincipal(struct soap*, const char*, int, const struct __ns1__authenticateByCallerPrincipal *, const char*);
SOAP_FMAC3 struct __ns1__authenticateByCallerPrincipal * SOAP_FMAC4 soap_in___ns1__authenticateByCallerPrincipal(struct soap*, const char*, struct __ns1__authenticateByCallerPrincipal *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__authenticateByCallerPrincipal(struct soap*, const struct __ns1__authenticateByCallerPrincipal *, const char*, const char*);

#ifndef soap_write___ns1__authenticateByCallerPrincipal
#define soap_write___ns1__authenticateByCallerPrincipal(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__authenticateByCallerPrincipal(soap, data),0) || soap_put___ns1__authenticateByCallerPrincipal(soap, data, "-ns1:authenticateByCallerPrincipal", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__authenticateByCallerPrincipal * SOAP_FMAC4 soap_get___ns1__authenticateByCallerPrincipal(struct soap*, struct __ns1__authenticateByCallerPrincipal *, const char*, const char*);

#ifndef soap_read___ns1__authenticateByCallerPrincipal
#define soap_read___ns1__authenticateByCallerPrincipal(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__authenticateByCallerPrincipal(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__authenticateByCallerPrincipal * SOAP_FMAC2 soap_instantiate___ns1__authenticateByCallerPrincipal(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__authenticateByCallerPrincipal * soap_new___ns1__authenticateByCallerPrincipal(struct soap *soap, int n = -1) { return soap_instantiate___ns1__authenticateByCallerPrincipal(soap, n, NULL, NULL, NULL); }

inline struct __ns1__authenticateByCallerPrincipal * soap_new_req___ns1__authenticateByCallerPrincipal(struct soap *soap) { struct __ns1__authenticateByCallerPrincipal *_p = soap_instantiate___ns1__authenticateByCallerPrincipal(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__authenticateByCallerPrincipal(soap, _p); } return _p; }

inline struct __ns1__authenticateByCallerPrincipal * soap_new_set___ns1__authenticateByCallerPrincipal(struct soap *soap, ns1__authenticateByCallerPrincipal *ns1__authenticateByCallerPrincipal_) { struct __ns1__authenticateByCallerPrincipal *_p = soap_instantiate___ns1__authenticateByCallerPrincipal(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__authenticateByCallerPrincipal(soap, _p); _p->ns1__authenticateByCallerPrincipal_ = ns1__authenticateByCallerPrincipal_; } return _p; }

inline void soap_delete___ns1__authenticateByCallerPrincipal(struct soap *soap, struct __ns1__authenticateByCallerPrincipal *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__authenticateByCallerPrincipal(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__authenticateByTrustedPrincipal
#define SOAP_TYPE___ns1__authenticateByTrustedPrincipal (99)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__authenticateByTrustedPrincipal(struct soap*, struct __ns1__authenticateByTrustedPrincipal *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__authenticateByTrustedPrincipal(struct soap*, const struct __ns1__authenticateByTrustedPrincipal *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__authenticateByTrustedPrincipal(struct soap*, const char*, int, const struct __ns1__authenticateByTrustedPrincipal *, const char*);
SOAP_FMAC3 struct __ns1__authenticateByTrustedPrincipal * SOAP_FMAC4 soap_in___ns1__authenticateByTrustedPrincipal(struct soap*, const char*, struct __ns1__authenticateByTrustedPrincipal *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__authenticateByTrustedPrincipal(struct soap*, const struct __ns1__authenticateByTrustedPrincipal *, const char*, const char*);

#ifndef soap_write___ns1__authenticateByTrustedPrincipal
#define soap_write___ns1__authenticateByTrustedPrincipal(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__authenticateByTrustedPrincipal(soap, data),0) || soap_put___ns1__authenticateByTrustedPrincipal(soap, data, "-ns1:authenticateByTrustedPrincipal", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__authenticateByTrustedPrincipal * SOAP_FMAC4 soap_get___ns1__authenticateByTrustedPrincipal(struct soap*, struct __ns1__authenticateByTrustedPrincipal *, const char*, const char*);

#ifndef soap_read___ns1__authenticateByTrustedPrincipal
#define soap_read___ns1__authenticateByTrustedPrincipal(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__authenticateByTrustedPrincipal(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__authenticateByTrustedPrincipal * SOAP_FMAC2 soap_instantiate___ns1__authenticateByTrustedPrincipal(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__authenticateByTrustedPrincipal * soap_new___ns1__authenticateByTrustedPrincipal(struct soap *soap, int n = -1) { return soap_instantiate___ns1__authenticateByTrustedPrincipal(soap, n, NULL, NULL, NULL); }

inline struct __ns1__authenticateByTrustedPrincipal * soap_new_req___ns1__authenticateByTrustedPrincipal(struct soap *soap) { struct __ns1__authenticateByTrustedPrincipal *_p = soap_instantiate___ns1__authenticateByTrustedPrincipal(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__authenticateByTrustedPrincipal(soap, _p); } return _p; }

inline struct __ns1__authenticateByTrustedPrincipal * soap_new_set___ns1__authenticateByTrustedPrincipal(struct soap *soap, ns1__authenticateByTrustedPrincipal *ns1__authenticateByTrustedPrincipal_) { struct __ns1__authenticateByTrustedPrincipal *_p = soap_instantiate___ns1__authenticateByTrustedPrincipal(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__authenticateByTrustedPrincipal(soap, _p); _p->ns1__authenticateByTrustedPrincipal_ = ns1__authenticateByTrustedPrincipal_; } return _p; }

inline void soap_delete___ns1__authenticateByTrustedPrincipal(struct soap *soap, struct __ns1__authenticateByTrustedPrincipal *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__authenticateByTrustedPrincipal(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__authenticateByLoginPassword
#define SOAP_TYPE___ns1__authenticateByLoginPassword (95)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__authenticateByLoginPassword(struct soap*, struct __ns1__authenticateByLoginPassword *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__authenticateByLoginPassword(struct soap*, const struct __ns1__authenticateByLoginPassword *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__authenticateByLoginPassword(struct soap*, const char*, int, const struct __ns1__authenticateByLoginPassword *, const char*);
SOAP_FMAC3 struct __ns1__authenticateByLoginPassword * SOAP_FMAC4 soap_in___ns1__authenticateByLoginPassword(struct soap*, const char*, struct __ns1__authenticateByLoginPassword *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__authenticateByLoginPassword(struct soap*, const struct __ns1__authenticateByLoginPassword *, const char*, const char*);

#ifndef soap_write___ns1__authenticateByLoginPassword
#define soap_write___ns1__authenticateByLoginPassword(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__authenticateByLoginPassword(soap, data),0) || soap_put___ns1__authenticateByLoginPassword(soap, data, "-ns1:authenticateByLoginPassword", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__authenticateByLoginPassword * SOAP_FMAC4 soap_get___ns1__authenticateByLoginPassword(struct soap*, struct __ns1__authenticateByLoginPassword *, const char*, const char*);

#ifndef soap_read___ns1__authenticateByLoginPassword
#define soap_read___ns1__authenticateByLoginPassword(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__authenticateByLoginPassword(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__authenticateByLoginPassword * SOAP_FMAC2 soap_instantiate___ns1__authenticateByLoginPassword(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__authenticateByLoginPassword * soap_new___ns1__authenticateByLoginPassword(struct soap *soap, int n = -1) { return soap_instantiate___ns1__authenticateByLoginPassword(soap, n, NULL, NULL, NULL); }

inline struct __ns1__authenticateByLoginPassword * soap_new_req___ns1__authenticateByLoginPassword(struct soap *soap) { struct __ns1__authenticateByLoginPassword *_p = soap_instantiate___ns1__authenticateByLoginPassword(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__authenticateByLoginPassword(soap, _p); } return _p; }

inline struct __ns1__authenticateByLoginPassword * soap_new_set___ns1__authenticateByLoginPassword(struct soap *soap, ns1__authenticateByLoginPassword *ns1__authenticateByLoginPassword_) { struct __ns1__authenticateByLoginPassword *_p = soap_instantiate___ns1__authenticateByLoginPassword(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__authenticateByLoginPassword(soap, _p); _p->ns1__authenticateByLoginPassword_ = ns1__authenticateByLoginPassword_; } return _p; }

inline void soap_delete___ns1__authenticateByLoginPassword(struct soap *soap, struct __ns1__authenticateByLoginPassword *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__authenticateByLoginPassword(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__authenticateByKerberos
#define SOAP_TYPE___ns1__authenticateByKerberos (91)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__authenticateByKerberos(struct soap*, struct __ns1__authenticateByKerberos *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__authenticateByKerberos(struct soap*, const struct __ns1__authenticateByKerberos *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__authenticateByKerberos(struct soap*, const char*, int, const struct __ns1__authenticateByKerberos *, const char*);
SOAP_FMAC3 struct __ns1__authenticateByKerberos * SOAP_FMAC4 soap_in___ns1__authenticateByKerberos(struct soap*, const char*, struct __ns1__authenticateByKerberos *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__authenticateByKerberos(struct soap*, const struct __ns1__authenticateByKerberos *, const char*, const char*);

#ifndef soap_write___ns1__authenticateByKerberos
#define soap_write___ns1__authenticateByKerberos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__authenticateByKerberos(soap, data),0) || soap_put___ns1__authenticateByKerberos(soap, data, "-ns1:authenticateByKerberos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__authenticateByKerberos * SOAP_FMAC4 soap_get___ns1__authenticateByKerberos(struct soap*, struct __ns1__authenticateByKerberos *, const char*, const char*);

#ifndef soap_read___ns1__authenticateByKerberos
#define soap_read___ns1__authenticateByKerberos(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__authenticateByKerberos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__authenticateByKerberos * SOAP_FMAC2 soap_instantiate___ns1__authenticateByKerberos(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__authenticateByKerberos * soap_new___ns1__authenticateByKerberos(struct soap *soap, int n = -1) { return soap_instantiate___ns1__authenticateByKerberos(soap, n, NULL, NULL, NULL); }

inline struct __ns1__authenticateByKerberos * soap_new_req___ns1__authenticateByKerberos(struct soap *soap) { struct __ns1__authenticateByKerberos *_p = soap_instantiate___ns1__authenticateByKerberos(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__authenticateByKerberos(soap, _p); } return _p; }

inline struct __ns1__authenticateByKerberos * soap_new_set___ns1__authenticateByKerberos(struct soap *soap, ns1__authenticateByKerberos *ns1__authenticateByKerberos_) { struct __ns1__authenticateByKerberos *_p = soap_instantiate___ns1__authenticateByKerberos(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__authenticateByKerberos(soap, _p); _p->ns1__authenticateByKerberos_ = ns1__authenticateByKerberos_; } return _p; }

inline void soap_delete___ns1__authenticateByKerberos(struct soap *soap, struct __ns1__authenticateByKerberos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__authenticateByKerberos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (153)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (152)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (146)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTons1__getTaskResponse
#define SOAP_TYPE_PointerTons1__getTaskResponse (141)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getTaskResponse(struct soap*, ns1__getTaskResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getTaskResponse(struct soap*, const char *, int, ns1__getTaskResponse *const*, const char *);
SOAP_FMAC3 ns1__getTaskResponse ** SOAP_FMAC4 soap_in_PointerTons1__getTaskResponse(struct soap*, const char*, ns1__getTaskResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getTaskResponse(struct soap*, ns1__getTaskResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__getTaskResponse
#define soap_write_PointerTons1__getTaskResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__getTaskResponse(soap, data),0) || soap_put_PointerTons1__getTaskResponse(soap, data, "ns1:getTaskResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__getTaskResponse ** SOAP_FMAC4 soap_get_PointerTons1__getTaskResponse(struct soap*, ns1__getTaskResponse **, const char*, const char*);

#ifndef soap_read_PointerTons1__getTaskResponse
#define soap_read_PointerTons1__getTaskResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__getTaskResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__getTask
#define SOAP_TYPE_PointerTons1__getTask (140)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getTask(struct soap*, ns1__getTask *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getTask(struct soap*, const char *, int, ns1__getTask *const*, const char *);
SOAP_FMAC3 ns1__getTask ** SOAP_FMAC4 soap_in_PointerTons1__getTask(struct soap*, const char*, ns1__getTask **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getTask(struct soap*, ns1__getTask *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__getTask
#define soap_write_PointerTons1__getTask(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__getTask(soap, data),0) || soap_put_PointerTons1__getTask(soap, data, "ns1:getTask", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__getTask ** SOAP_FMAC4 soap_get_PointerTons1__getTask(struct soap*, ns1__getTask **, const char*, const char*);

#ifndef soap_read_PointerTons1__getTask
#define soap_read_PointerTons1__getTask(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__getTask(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__assignTaskResponse
#define SOAP_TYPE_PointerTons1__assignTaskResponse (136)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__assignTaskResponse(struct soap*, ns1__assignTaskResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__assignTaskResponse(struct soap*, const char *, int, ns1__assignTaskResponse *const*, const char *);
SOAP_FMAC3 ns1__assignTaskResponse ** SOAP_FMAC4 soap_in_PointerTons1__assignTaskResponse(struct soap*, const char*, ns1__assignTaskResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__assignTaskResponse(struct soap*, ns1__assignTaskResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__assignTaskResponse
#define soap_write_PointerTons1__assignTaskResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__assignTaskResponse(soap, data),0) || soap_put_PointerTons1__assignTaskResponse(soap, data, "ns1:assignTaskResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__assignTaskResponse ** SOAP_FMAC4 soap_get_PointerTons1__assignTaskResponse(struct soap*, ns1__assignTaskResponse **, const char*, const char*);

#ifndef soap_read_PointerTons1__assignTaskResponse
#define soap_read_PointerTons1__assignTaskResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__assignTaskResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__assignTask
#define SOAP_TYPE_PointerTons1__assignTask (135)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__assignTask(struct soap*, ns1__assignTask *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__assignTask(struct soap*, const char *, int, ns1__assignTask *const*, const char *);
SOAP_FMAC3 ns1__assignTask ** SOAP_FMAC4 soap_in_PointerTons1__assignTask(struct soap*, const char*, ns1__assignTask **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__assignTask(struct soap*, ns1__assignTask *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__assignTask
#define soap_write_PointerTons1__assignTask(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__assignTask(soap, data),0) || soap_put_PointerTons1__assignTask(soap, data, "ns1:assignTask", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__assignTask ** SOAP_FMAC4 soap_get_PointerTons1__assignTask(struct soap*, ns1__assignTask **, const char*, const char*);

#ifndef soap_read_PointerTons1__assignTask
#define soap_read_PointerTons1__assignTask(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__assignTask(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__getProcessTasksResponse
#define SOAP_TYPE_PointerTons1__getProcessTasksResponse (132)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getProcessTasksResponse(struct soap*, ns1__getProcessTasksResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getProcessTasksResponse(struct soap*, const char *, int, ns1__getProcessTasksResponse *const*, const char *);
SOAP_FMAC3 ns1__getProcessTasksResponse ** SOAP_FMAC4 soap_in_PointerTons1__getProcessTasksResponse(struct soap*, const char*, ns1__getProcessTasksResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getProcessTasksResponse(struct soap*, ns1__getProcessTasksResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__getProcessTasksResponse
#define soap_write_PointerTons1__getProcessTasksResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__getProcessTasksResponse(soap, data),0) || soap_put_PointerTons1__getProcessTasksResponse(soap, data, "ns1:getProcessTasksResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__getProcessTasksResponse ** SOAP_FMAC4 soap_get_PointerTons1__getProcessTasksResponse(struct soap*, ns1__getProcessTasksResponse **, const char*, const char*);

#ifndef soap_read_PointerTons1__getProcessTasksResponse
#define soap_read_PointerTons1__getProcessTasksResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__getProcessTasksResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__getProcessTasks
#define SOAP_TYPE_PointerTons1__getProcessTasks (131)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getProcessTasks(struct soap*, ns1__getProcessTasks *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getProcessTasks(struct soap*, const char *, int, ns1__getProcessTasks *const*, const char *);
SOAP_FMAC3 ns1__getProcessTasks ** SOAP_FMAC4 soap_in_PointerTons1__getProcessTasks(struct soap*, const char*, ns1__getProcessTasks **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getProcessTasks(struct soap*, ns1__getProcessTasks *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__getProcessTasks
#define soap_write_PointerTons1__getProcessTasks(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__getProcessTasks(soap, data),0) || soap_put_PointerTons1__getProcessTasks(soap, data, "ns1:getProcessTasks", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__getProcessTasks ** SOAP_FMAC4 soap_get_PointerTons1__getProcessTasks(struct soap*, ns1__getProcessTasks **, const char*, const char*);

#ifndef soap_read_PointerTons1__getProcessTasks
#define soap_read_PointerTons1__getProcessTasks(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__getProcessTasks(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__completeTaskWSResponse
#define SOAP_TYPE_PointerTons1__completeTaskWSResponse (127)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__completeTaskWSResponse(struct soap*, ns1__completeTaskWSResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__completeTaskWSResponse(struct soap*, const char *, int, ns1__completeTaskWSResponse *const*, const char *);
SOAP_FMAC3 ns1__completeTaskWSResponse ** SOAP_FMAC4 soap_in_PointerTons1__completeTaskWSResponse(struct soap*, const char*, ns1__completeTaskWSResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__completeTaskWSResponse(struct soap*, ns1__completeTaskWSResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__completeTaskWSResponse
#define soap_write_PointerTons1__completeTaskWSResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__completeTaskWSResponse(soap, data),0) || soap_put_PointerTons1__completeTaskWSResponse(soap, data, "ns1:completeTaskWSResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__completeTaskWSResponse ** SOAP_FMAC4 soap_get_PointerTons1__completeTaskWSResponse(struct soap*, ns1__completeTaskWSResponse **, const char*, const char*);

#ifndef soap_read_PointerTons1__completeTaskWSResponse
#define soap_read_PointerTons1__completeTaskWSResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__completeTaskWSResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__completeTaskWS
#define SOAP_TYPE_PointerTons1__completeTaskWS (126)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__completeTaskWS(struct soap*, ns1__completeTaskWS *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__completeTaskWS(struct soap*, const char *, int, ns1__completeTaskWS *const*, const char *);
SOAP_FMAC3 ns1__completeTaskWS ** SOAP_FMAC4 soap_in_PointerTons1__completeTaskWS(struct soap*, const char*, ns1__completeTaskWS **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__completeTaskWS(struct soap*, ns1__completeTaskWS *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__completeTaskWS
#define soap_write_PointerTons1__completeTaskWS(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__completeTaskWS(soap, data),0) || soap_put_PointerTons1__completeTaskWS(soap, data, "ns1:completeTaskWS", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__completeTaskWS ** SOAP_FMAC4 soap_get_PointerTons1__completeTaskWS(struct soap*, ns1__completeTaskWS **, const char*, const char*);

#ifndef soap_read_PointerTons1__completeTaskWS
#define soap_read_PointerTons1__completeTaskWS(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__completeTaskWS(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__getTasksResponse
#define SOAP_TYPE_PointerTons1__getTasksResponse (123)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getTasksResponse(struct soap*, ns1__getTasksResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getTasksResponse(struct soap*, const char *, int, ns1__getTasksResponse *const*, const char *);
SOAP_FMAC3 ns1__getTasksResponse ** SOAP_FMAC4 soap_in_PointerTons1__getTasksResponse(struct soap*, const char*, ns1__getTasksResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getTasksResponse(struct soap*, ns1__getTasksResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__getTasksResponse
#define soap_write_PointerTons1__getTasksResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__getTasksResponse(soap, data),0) || soap_put_PointerTons1__getTasksResponse(soap, data, "ns1:getTasksResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__getTasksResponse ** SOAP_FMAC4 soap_get_PointerTons1__getTasksResponse(struct soap*, ns1__getTasksResponse **, const char*, const char*);

#ifndef soap_read_PointerTons1__getTasksResponse
#define soap_read_PointerTons1__getTasksResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__getTasksResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__getTasks
#define SOAP_TYPE_PointerTons1__getTasks (122)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getTasks(struct soap*, ns1__getTasks *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getTasks(struct soap*, const char *, int, ns1__getTasks *const*, const char *);
SOAP_FMAC3 ns1__getTasks ** SOAP_FMAC4 soap_in_PointerTons1__getTasks(struct soap*, const char*, ns1__getTasks **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getTasks(struct soap*, ns1__getTasks *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__getTasks
#define soap_write_PointerTons1__getTasks(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__getTasks(soap, data),0) || soap_put_PointerTons1__getTasks(soap, data, "ns1:getTasks", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__getTasks ** SOAP_FMAC4 soap_get_PointerTons1__getTasks(struct soap*, ns1__getTasks **, const char*, const char*);

#ifndef soap_read_PointerTons1__getTasks
#define soap_read_PointerTons1__getTasks(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__getTasks(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__reassignTasksResponse
#define SOAP_TYPE_PointerTons1__reassignTasksResponse (119)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__reassignTasksResponse(struct soap*, ns1__reassignTasksResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__reassignTasksResponse(struct soap*, const char *, int, ns1__reassignTasksResponse *const*, const char *);
SOAP_FMAC3 ns1__reassignTasksResponse ** SOAP_FMAC4 soap_in_PointerTons1__reassignTasksResponse(struct soap*, const char*, ns1__reassignTasksResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__reassignTasksResponse(struct soap*, ns1__reassignTasksResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__reassignTasksResponse
#define soap_write_PointerTons1__reassignTasksResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__reassignTasksResponse(soap, data),0) || soap_put_PointerTons1__reassignTasksResponse(soap, data, "ns1:reassignTasksResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__reassignTasksResponse ** SOAP_FMAC4 soap_get_PointerTons1__reassignTasksResponse(struct soap*, ns1__reassignTasksResponse **, const char*, const char*);

#ifndef soap_read_PointerTons1__reassignTasksResponse
#define soap_read_PointerTons1__reassignTasksResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__reassignTasksResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__reassignTasks
#define SOAP_TYPE_PointerTons1__reassignTasks (118)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__reassignTasks(struct soap*, ns1__reassignTasks *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__reassignTasks(struct soap*, const char *, int, ns1__reassignTasks *const*, const char *);
SOAP_FMAC3 ns1__reassignTasks ** SOAP_FMAC4 soap_in_PointerTons1__reassignTasks(struct soap*, const char*, ns1__reassignTasks **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__reassignTasks(struct soap*, ns1__reassignTasks *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__reassignTasks
#define soap_write_PointerTons1__reassignTasks(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__reassignTasks(soap, data),0) || soap_put_PointerTons1__reassignTasks(soap, data, "ns1:reassignTasks", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__reassignTasks ** SOAP_FMAC4 soap_get_PointerTons1__reassignTasks(struct soap*, ns1__reassignTasks **, const char*, const char*);

#ifndef soap_read_PointerTons1__reassignTasks
#define soap_read_PointerTons1__reassignTasks(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__reassignTasks(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__reassignTaskResponse
#define SOAP_TYPE_PointerTons1__reassignTaskResponse (114)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__reassignTaskResponse(struct soap*, ns1__reassignTaskResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__reassignTaskResponse(struct soap*, const char *, int, ns1__reassignTaskResponse *const*, const char *);
SOAP_FMAC3 ns1__reassignTaskResponse ** SOAP_FMAC4 soap_in_PointerTons1__reassignTaskResponse(struct soap*, const char*, ns1__reassignTaskResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__reassignTaskResponse(struct soap*, ns1__reassignTaskResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__reassignTaskResponse
#define soap_write_PointerTons1__reassignTaskResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__reassignTaskResponse(soap, data),0) || soap_put_PointerTons1__reassignTaskResponse(soap, data, "ns1:reassignTaskResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__reassignTaskResponse ** SOAP_FMAC4 soap_get_PointerTons1__reassignTaskResponse(struct soap*, ns1__reassignTaskResponse **, const char*, const char*);

#ifndef soap_read_PointerTons1__reassignTaskResponse
#define soap_read_PointerTons1__reassignTaskResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__reassignTaskResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__reassignTask
#define SOAP_TYPE_PointerTons1__reassignTask (113)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__reassignTask(struct soap*, ns1__reassignTask *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__reassignTask(struct soap*, const char *, int, ns1__reassignTask *const*, const char *);
SOAP_FMAC3 ns1__reassignTask ** SOAP_FMAC4 soap_in_PointerTons1__reassignTask(struct soap*, const char*, ns1__reassignTask **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__reassignTask(struct soap*, ns1__reassignTask *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__reassignTask
#define soap_write_PointerTons1__reassignTask(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__reassignTask(soap, data),0) || soap_put_PointerTons1__reassignTask(soap, data, "ns1:reassignTask", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__reassignTask ** SOAP_FMAC4 soap_get_PointerTons1__reassignTask(struct soap*, ns1__reassignTask **, const char*, const char*);

#ifndef soap_read_PointerTons1__reassignTask
#define soap_read_PointerTons1__reassignTask(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__reassignTask(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__markTaskOpenedResponse
#define SOAP_TYPE_PointerTons1__markTaskOpenedResponse (109)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__markTaskOpenedResponse(struct soap*, ns1__markTaskOpenedResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__markTaskOpenedResponse(struct soap*, const char *, int, ns1__markTaskOpenedResponse *const*, const char *);
SOAP_FMAC3 ns1__markTaskOpenedResponse ** SOAP_FMAC4 soap_in_PointerTons1__markTaskOpenedResponse(struct soap*, const char*, ns1__markTaskOpenedResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__markTaskOpenedResponse(struct soap*, ns1__markTaskOpenedResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__markTaskOpenedResponse
#define soap_write_PointerTons1__markTaskOpenedResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__markTaskOpenedResponse(soap, data),0) || soap_put_PointerTons1__markTaskOpenedResponse(soap, data, "ns1:markTaskOpenedResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__markTaskOpenedResponse ** SOAP_FMAC4 soap_get_PointerTons1__markTaskOpenedResponse(struct soap*, ns1__markTaskOpenedResponse **, const char*, const char*);

#ifndef soap_read_PointerTons1__markTaskOpenedResponse
#define soap_read_PointerTons1__markTaskOpenedResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__markTaskOpenedResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__markTaskOpened
#define SOAP_TYPE_PointerTons1__markTaskOpened (108)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__markTaskOpened(struct soap*, ns1__markTaskOpened *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__markTaskOpened(struct soap*, const char *, int, ns1__markTaskOpened *const*, const char *);
SOAP_FMAC3 ns1__markTaskOpened ** SOAP_FMAC4 soap_in_PointerTons1__markTaskOpened(struct soap*, const char*, ns1__markTaskOpened **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__markTaskOpened(struct soap*, ns1__markTaskOpened *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__markTaskOpened
#define soap_write_PointerTons1__markTaskOpened(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__markTaskOpened(soap, data),0) || soap_put_PointerTons1__markTaskOpened(soap, data, "ns1:markTaskOpened", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__markTaskOpened ** SOAP_FMAC4 soap_get_PointerTons1__markTaskOpened(struct soap*, ns1__markTaskOpened **, const char*, const char*);

#ifndef soap_read_PointerTons1__markTaskOpened
#define soap_read_PointerTons1__markTaskOpened(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__markTaskOpened(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__getMyTasksResponse
#define SOAP_TYPE_PointerTons1__getMyTasksResponse (105)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getMyTasksResponse(struct soap*, ns1__getMyTasksResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getMyTasksResponse(struct soap*, const char *, int, ns1__getMyTasksResponse *const*, const char *);
SOAP_FMAC3 ns1__getMyTasksResponse ** SOAP_FMAC4 soap_in_PointerTons1__getMyTasksResponse(struct soap*, const char*, ns1__getMyTasksResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getMyTasksResponse(struct soap*, ns1__getMyTasksResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__getMyTasksResponse
#define soap_write_PointerTons1__getMyTasksResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__getMyTasksResponse(soap, data),0) || soap_put_PointerTons1__getMyTasksResponse(soap, data, "ns1:getMyTasksResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__getMyTasksResponse ** SOAP_FMAC4 soap_get_PointerTons1__getMyTasksResponse(struct soap*, ns1__getMyTasksResponse **, const char*, const char*);

#ifndef soap_read_PointerTons1__getMyTasksResponse
#define soap_read_PointerTons1__getMyTasksResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__getMyTasksResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__getMyTasks
#define SOAP_TYPE_PointerTons1__getMyTasks (104)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getMyTasks(struct soap*, ns1__getMyTasks *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getMyTasks(struct soap*, const char *, int, ns1__getMyTasks *const*, const char *);
SOAP_FMAC3 ns1__getMyTasks ** SOAP_FMAC4 soap_in_PointerTons1__getMyTasks(struct soap*, const char*, ns1__getMyTasks **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getMyTasks(struct soap*, ns1__getMyTasks *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__getMyTasks
#define soap_write_PointerTons1__getMyTasks(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__getMyTasks(soap, data),0) || soap_put_PointerTons1__getMyTasks(soap, data, "ns1:getMyTasks", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__getMyTasks ** SOAP_FMAC4 soap_get_PointerTons1__getMyTasks(struct soap*, ns1__getMyTasks **, const char*, const char*);

#ifndef soap_read_PointerTons1__getMyTasks
#define soap_read_PointerTons1__getMyTasks(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__getMyTasks(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__authenticateByCallerPrincipalResponse
#define SOAP_TYPE_PointerTons1__authenticateByCallerPrincipalResponse (101)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__authenticateByCallerPrincipalResponse(struct soap*, ns1__authenticateByCallerPrincipalResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__authenticateByCallerPrincipalResponse(struct soap*, const char *, int, ns1__authenticateByCallerPrincipalResponse *const*, const char *);
SOAP_FMAC3 ns1__authenticateByCallerPrincipalResponse ** SOAP_FMAC4 soap_in_PointerTons1__authenticateByCallerPrincipalResponse(struct soap*, const char*, ns1__authenticateByCallerPrincipalResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__authenticateByCallerPrincipalResponse(struct soap*, ns1__authenticateByCallerPrincipalResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__authenticateByCallerPrincipalResponse
#define soap_write_PointerTons1__authenticateByCallerPrincipalResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__authenticateByCallerPrincipalResponse(soap, data),0) || soap_put_PointerTons1__authenticateByCallerPrincipalResponse(soap, data, "ns1:authenticateByCallerPrincipalResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__authenticateByCallerPrincipalResponse ** SOAP_FMAC4 soap_get_PointerTons1__authenticateByCallerPrincipalResponse(struct soap*, ns1__authenticateByCallerPrincipalResponse **, const char*, const char*);

#ifndef soap_read_PointerTons1__authenticateByCallerPrincipalResponse
#define soap_read_PointerTons1__authenticateByCallerPrincipalResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__authenticateByCallerPrincipalResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__authenticateByCallerPrincipal
#define SOAP_TYPE_PointerTons1__authenticateByCallerPrincipal (100)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__authenticateByCallerPrincipal(struct soap*, ns1__authenticateByCallerPrincipal *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__authenticateByCallerPrincipal(struct soap*, const char *, int, ns1__authenticateByCallerPrincipal *const*, const char *);
SOAP_FMAC3 ns1__authenticateByCallerPrincipal ** SOAP_FMAC4 soap_in_PointerTons1__authenticateByCallerPrincipal(struct soap*, const char*, ns1__authenticateByCallerPrincipal **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__authenticateByCallerPrincipal(struct soap*, ns1__authenticateByCallerPrincipal *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__authenticateByCallerPrincipal
#define soap_write_PointerTons1__authenticateByCallerPrincipal(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__authenticateByCallerPrincipal(soap, data),0) || soap_put_PointerTons1__authenticateByCallerPrincipal(soap, data, "ns1:authenticateByCallerPrincipal", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__authenticateByCallerPrincipal ** SOAP_FMAC4 soap_get_PointerTons1__authenticateByCallerPrincipal(struct soap*, ns1__authenticateByCallerPrincipal **, const char*, const char*);

#ifndef soap_read_PointerTons1__authenticateByCallerPrincipal
#define soap_read_PointerTons1__authenticateByCallerPrincipal(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__authenticateByCallerPrincipal(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__authenticateByTrustedPrincipalResponse
#define SOAP_TYPE_PointerTons1__authenticateByTrustedPrincipalResponse (97)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__authenticateByTrustedPrincipalResponse(struct soap*, ns1__authenticateByTrustedPrincipalResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__authenticateByTrustedPrincipalResponse(struct soap*, const char *, int, ns1__authenticateByTrustedPrincipalResponse *const*, const char *);
SOAP_FMAC3 ns1__authenticateByTrustedPrincipalResponse ** SOAP_FMAC4 soap_in_PointerTons1__authenticateByTrustedPrincipalResponse(struct soap*, const char*, ns1__authenticateByTrustedPrincipalResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__authenticateByTrustedPrincipalResponse(struct soap*, ns1__authenticateByTrustedPrincipalResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__authenticateByTrustedPrincipalResponse
#define soap_write_PointerTons1__authenticateByTrustedPrincipalResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__authenticateByTrustedPrincipalResponse(soap, data),0) || soap_put_PointerTons1__authenticateByTrustedPrincipalResponse(soap, data, "ns1:authenticateByTrustedPrincipalResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__authenticateByTrustedPrincipalResponse ** SOAP_FMAC4 soap_get_PointerTons1__authenticateByTrustedPrincipalResponse(struct soap*, ns1__authenticateByTrustedPrincipalResponse **, const char*, const char*);

#ifndef soap_read_PointerTons1__authenticateByTrustedPrincipalResponse
#define soap_read_PointerTons1__authenticateByTrustedPrincipalResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__authenticateByTrustedPrincipalResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__authenticateByTrustedPrincipal
#define SOAP_TYPE_PointerTons1__authenticateByTrustedPrincipal (96)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__authenticateByTrustedPrincipal(struct soap*, ns1__authenticateByTrustedPrincipal *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__authenticateByTrustedPrincipal(struct soap*, const char *, int, ns1__authenticateByTrustedPrincipal *const*, const char *);
SOAP_FMAC3 ns1__authenticateByTrustedPrincipal ** SOAP_FMAC4 soap_in_PointerTons1__authenticateByTrustedPrincipal(struct soap*, const char*, ns1__authenticateByTrustedPrincipal **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__authenticateByTrustedPrincipal(struct soap*, ns1__authenticateByTrustedPrincipal *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__authenticateByTrustedPrincipal
#define soap_write_PointerTons1__authenticateByTrustedPrincipal(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__authenticateByTrustedPrincipal(soap, data),0) || soap_put_PointerTons1__authenticateByTrustedPrincipal(soap, data, "ns1:authenticateByTrustedPrincipal", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__authenticateByTrustedPrincipal ** SOAP_FMAC4 soap_get_PointerTons1__authenticateByTrustedPrincipal(struct soap*, ns1__authenticateByTrustedPrincipal **, const char*, const char*);

#ifndef soap_read_PointerTons1__authenticateByTrustedPrincipal
#define soap_read_PointerTons1__authenticateByTrustedPrincipal(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__authenticateByTrustedPrincipal(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__authenticateByLoginPasswordResponse
#define SOAP_TYPE_PointerTons1__authenticateByLoginPasswordResponse (93)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__authenticateByLoginPasswordResponse(struct soap*, ns1__authenticateByLoginPasswordResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__authenticateByLoginPasswordResponse(struct soap*, const char *, int, ns1__authenticateByLoginPasswordResponse *const*, const char *);
SOAP_FMAC3 ns1__authenticateByLoginPasswordResponse ** SOAP_FMAC4 soap_in_PointerTons1__authenticateByLoginPasswordResponse(struct soap*, const char*, ns1__authenticateByLoginPasswordResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__authenticateByLoginPasswordResponse(struct soap*, ns1__authenticateByLoginPasswordResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__authenticateByLoginPasswordResponse
#define soap_write_PointerTons1__authenticateByLoginPasswordResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__authenticateByLoginPasswordResponse(soap, data),0) || soap_put_PointerTons1__authenticateByLoginPasswordResponse(soap, data, "ns1:authenticateByLoginPasswordResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__authenticateByLoginPasswordResponse ** SOAP_FMAC4 soap_get_PointerTons1__authenticateByLoginPasswordResponse(struct soap*, ns1__authenticateByLoginPasswordResponse **, const char*, const char*);

#ifndef soap_read_PointerTons1__authenticateByLoginPasswordResponse
#define soap_read_PointerTons1__authenticateByLoginPasswordResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__authenticateByLoginPasswordResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__authenticateByLoginPassword
#define SOAP_TYPE_PointerTons1__authenticateByLoginPassword (92)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__authenticateByLoginPassword(struct soap*, ns1__authenticateByLoginPassword *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__authenticateByLoginPassword(struct soap*, const char *, int, ns1__authenticateByLoginPassword *const*, const char *);
SOAP_FMAC3 ns1__authenticateByLoginPassword ** SOAP_FMAC4 soap_in_PointerTons1__authenticateByLoginPassword(struct soap*, const char*, ns1__authenticateByLoginPassword **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__authenticateByLoginPassword(struct soap*, ns1__authenticateByLoginPassword *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__authenticateByLoginPassword
#define soap_write_PointerTons1__authenticateByLoginPassword(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__authenticateByLoginPassword(soap, data),0) || soap_put_PointerTons1__authenticateByLoginPassword(soap, data, "ns1:authenticateByLoginPassword", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__authenticateByLoginPassword ** SOAP_FMAC4 soap_get_PointerTons1__authenticateByLoginPassword(struct soap*, ns1__authenticateByLoginPassword **, const char*, const char*);

#ifndef soap_read_PointerTons1__authenticateByLoginPassword
#define soap_read_PointerTons1__authenticateByLoginPassword(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__authenticateByLoginPassword(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__authenticateByKerberosResponse
#define SOAP_TYPE_PointerTons1__authenticateByKerberosResponse (89)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__authenticateByKerberosResponse(struct soap*, ns1__authenticateByKerberosResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__authenticateByKerberosResponse(struct soap*, const char *, int, ns1__authenticateByKerberosResponse *const*, const char *);
SOAP_FMAC3 ns1__authenticateByKerberosResponse ** SOAP_FMAC4 soap_in_PointerTons1__authenticateByKerberosResponse(struct soap*, const char*, ns1__authenticateByKerberosResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__authenticateByKerberosResponse(struct soap*, ns1__authenticateByKerberosResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__authenticateByKerberosResponse
#define soap_write_PointerTons1__authenticateByKerberosResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__authenticateByKerberosResponse(soap, data),0) || soap_put_PointerTons1__authenticateByKerberosResponse(soap, data, "ns1:authenticateByKerberosResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__authenticateByKerberosResponse ** SOAP_FMAC4 soap_get_PointerTons1__authenticateByKerberosResponse(struct soap*, ns1__authenticateByKerberosResponse **, const char*, const char*);

#ifndef soap_read_PointerTons1__authenticateByKerberosResponse
#define soap_read_PointerTons1__authenticateByKerberosResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__authenticateByKerberosResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__authenticateByKerberos
#define SOAP_TYPE_PointerTons1__authenticateByKerberos (88)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__authenticateByKerberos(struct soap*, ns1__authenticateByKerberos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__authenticateByKerberos(struct soap*, const char *, int, ns1__authenticateByKerberos *const*, const char *);
SOAP_FMAC3 ns1__authenticateByKerberos ** SOAP_FMAC4 soap_in_PointerTons1__authenticateByKerberos(struct soap*, const char*, ns1__authenticateByKerberos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__authenticateByKerberos(struct soap*, ns1__authenticateByKerberos *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__authenticateByKerberos
#define soap_write_PointerTons1__authenticateByKerberos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__authenticateByKerberos(soap, data),0) || soap_put_PointerTons1__authenticateByKerberos(soap, data, "ns1:authenticateByKerberos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__authenticateByKerberos ** SOAP_FMAC4 soap_get_PointerTons1__authenticateByKerberos(struct soap*, ns1__authenticateByKerberos **, const char*, const char*);

#ifndef soap_read_PointerTons1__authenticateByKerberos
#define soap_read_PointerTons1__authenticateByKerberos(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__authenticateByKerberos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__variable
#define SOAP_TYPE_PointerToPointerTons1__variable (87)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__variable(struct soap*, ns1__variable **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__variable(struct soap*, const char *, int, ns1__variable **const*, const char *);
SOAP_FMAC3 ns1__variable *** SOAP_FMAC4 soap_in_PointerToPointerTons1__variable(struct soap*, const char*, ns1__variable ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__variable(struct soap*, ns1__variable **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__variable
#define soap_write_PointerToPointerTons1__variable(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToPointerTons1__variable(soap, data),0) || soap_put_PointerToPointerTons1__variable(soap, data, "ns1:variable", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__variable *** SOAP_FMAC4 soap_get_PointerToPointerTons1__variable(struct soap*, ns1__variable ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__variable
#define soap_read_PointerToPointerTons1__variable(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__variable(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__variable
#define SOAP_TYPE_PointerTons1__variable (86)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__variable(struct soap*, ns1__variable *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__variable(struct soap*, const char *, int, ns1__variable *const*, const char *);
SOAP_FMAC3 ns1__variable ** SOAP_FMAC4 soap_in_PointerTons1__variable(struct soap*, const char*, ns1__variable **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__variable(struct soap*, ns1__variable *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__variable
#define soap_write_PointerTons1__variable(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__variable(soap, data),0) || soap_put_PointerTons1__variable(soap, data, "ns1:variable", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__variable ** SOAP_FMAC4 soap_get_PointerTons1__variable(struct soap*, ns1__variable **, const char*, const char*);

#ifndef soap_read_PointerTons1__variable
#define soap_read_PointerTons1__variable(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__variable(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__userType_attributesMap_entry
#define SOAP_TYPE_PointerTo_ns1__userType_attributesMap_entry (85)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__userType_attributesMap_entry(struct soap*, _ns1__userType_attributesMap_entry *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__userType_attributesMap_entry(struct soap*, const char *, int, _ns1__userType_attributesMap_entry *const*, const char *);
SOAP_FMAC3 _ns1__userType_attributesMap_entry ** SOAP_FMAC4 soap_in_PointerTo_ns1__userType_attributesMap_entry(struct soap*, const char*, _ns1__userType_attributesMap_entry **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__userType_attributesMap_entry(struct soap*, _ns1__userType_attributesMap_entry *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__userType_attributesMap_entry
#define soap_write_PointerTo_ns1__userType_attributesMap_entry(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__userType_attributesMap_entry(soap, data),0) || soap_put_PointerTo_ns1__userType_attributesMap_entry(soap, data, "ns1:userType-attributesMap-entry", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__userType_attributesMap_entry ** SOAP_FMAC4 soap_get_PointerTo_ns1__userType_attributesMap_entry(struct soap*, _ns1__userType_attributesMap_entry **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__userType_attributesMap_entry
#define soap_read_PointerTo_ns1__userType_attributesMap_entry(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__userType_attributesMap_entry(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__variableDefinition
#define SOAP_TYPE_PointerToPointerTons1__variableDefinition (82)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__variableDefinition(struct soap*, ns1__variableDefinition **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__variableDefinition(struct soap*, const char *, int, ns1__variableDefinition **const*, const char *);
SOAP_FMAC3 ns1__variableDefinition *** SOAP_FMAC4 soap_in_PointerToPointerTons1__variableDefinition(struct soap*, const char*, ns1__variableDefinition ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__variableDefinition(struct soap*, ns1__variableDefinition **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__variableDefinition
#define soap_write_PointerToPointerTons1__variableDefinition(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToPointerTons1__variableDefinition(soap, data),0) || soap_put_PointerToPointerTons1__variableDefinition(soap, data, "ns1:variableDefinition", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__variableDefinition *** SOAP_FMAC4 soap_get_PointerToPointerTons1__variableDefinition(struct soap*, ns1__variableDefinition ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__variableDefinition
#define soap_read_PointerToPointerTons1__variableDefinition(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__variableDefinition(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__variableDefinition
#define SOAP_TYPE_PointerTons1__variableDefinition (81)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__variableDefinition(struct soap*, ns1__variableDefinition *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__variableDefinition(struct soap*, const char *, int, ns1__variableDefinition *const*, const char *);
SOAP_FMAC3 ns1__variableDefinition ** SOAP_FMAC4 soap_in_PointerTons1__variableDefinition(struct soap*, const char*, ns1__variableDefinition **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__variableDefinition(struct soap*, ns1__variableDefinition *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__variableDefinition
#define soap_write_PointerTons1__variableDefinition(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__variableDefinition(soap, data),0) || soap_put_PointerTons1__variableDefinition(soap, data, "ns1:variableDefinition", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__variableDefinition ** SOAP_FMAC4 soap_get_PointerTons1__variableDefinition(struct soap*, ns1__variableDefinition **, const char*, const char*);

#ifndef soap_read_PointerTons1__variableDefinition
#define soap_read_PointerTons1__variableDefinition(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__variableDefinition(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__anyType
#define SOAP_TYPE_PointerToxsd__anyType (80)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__anyType(struct soap*, xsd__anyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__anyType(struct soap*, const char *, int, xsd__anyType *const*, const char *);
SOAP_FMAC3 xsd__anyType ** SOAP_FMAC4 soap_in_PointerToxsd__anyType(struct soap*, const char*, xsd__anyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__anyType(struct soap*, xsd__anyType *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__anyType
#define soap_write_PointerToxsd__anyType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__anyType(soap, data),0) || soap_put_PointerToxsd__anyType(soap, data, "xsd:anyType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__anyType ** SOAP_FMAC4 soap_get_PointerToxsd__anyType(struct soap*, xsd__anyType **, const char*, const char*);

#ifndef soap_read_PointerToxsd__anyType
#define soap_read_PointerToxsd__anyType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__anyType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__userType
#define SOAP_TYPE_PointerToPointerTons1__userType (79)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__userType(struct soap*, ns1__userType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__userType(struct soap*, const char *, int, ns1__userType **const*, const char *);
SOAP_FMAC3 ns1__userType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__userType(struct soap*, const char*, ns1__userType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__userType(struct soap*, ns1__userType **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__userType
#define soap_write_PointerToPointerTons1__userType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToPointerTons1__userType(soap, data),0) || soap_put_PointerToPointerTons1__userType(soap, data, "ns1:userType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__userType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__userType(struct soap*, ns1__userType ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__userType
#define soap_read_PointerToPointerTons1__userType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__userType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__userType
#define SOAP_TYPE_PointerTons1__userType (78)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__userType(struct soap*, ns1__userType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__userType(struct soap*, const char *, int, ns1__userType *const*, const char *);
SOAP_FMAC3 ns1__userType ** SOAP_FMAC4 soap_in_PointerTons1__userType(struct soap*, const char*, ns1__userType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__userType(struct soap*, ns1__userType *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__userType
#define soap_write_PointerTons1__userType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__userType(soap, data),0) || soap_put_PointerTons1__userType(soap, data, "ns1:userType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__userType ** SOAP_FMAC4 soap_get_PointerTons1__userType(struct soap*, ns1__userType **, const char*, const char*);

#ifndef soap_read_PointerTons1__userType
#define soap_read_PointerTons1__userType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__userType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons2__wfVariableStub
#define SOAP_TYPE_PointerToPointerTons2__wfVariableStub (77)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons2__wfVariableStub(struct soap*, ns2__wfVariableStub **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons2__wfVariableStub(struct soap*, const char *, int, ns2__wfVariableStub **const*, const char *);
SOAP_FMAC3 ns2__wfVariableStub *** SOAP_FMAC4 soap_in_PointerToPointerTons2__wfVariableStub(struct soap*, const char*, ns2__wfVariableStub ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons2__wfVariableStub(struct soap*, ns2__wfVariableStub **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons2__wfVariableStub
#define soap_write_PointerToPointerTons2__wfVariableStub(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToPointerTons2__wfVariableStub(soap, data),0) || soap_put_PointerToPointerTons2__wfVariableStub(soap, data, "ns2:wfVariableStub", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__wfVariableStub *** SOAP_FMAC4 soap_get_PointerToPointerTons2__wfVariableStub(struct soap*, ns2__wfVariableStub ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons2__wfVariableStub
#define soap_read_PointerToPointerTons2__wfVariableStub(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons2__wfVariableStub(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__wfVariableStub
#define SOAP_TYPE_PointerTons2__wfVariableStub (76)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__wfVariableStub(struct soap*, ns2__wfVariableStub *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__wfVariableStub(struct soap*, const char *, int, ns2__wfVariableStub *const*, const char *);
SOAP_FMAC3 ns2__wfVariableStub ** SOAP_FMAC4 soap_in_PointerTons2__wfVariableStub(struct soap*, const char*, ns2__wfVariableStub **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__wfVariableStub(struct soap*, ns2__wfVariableStub *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__wfVariableStub
#define soap_write_PointerTons2__wfVariableStub(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__wfVariableStub(soap, data),0) || soap_put_PointerTons2__wfVariableStub(soap, data, "ns2:wfVariableStub", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__wfVariableStub ** SOAP_FMAC4 soap_get_PointerTons2__wfVariableStub(struct soap*, ns2__wfVariableStub **, const char*, const char*);

#ifndef soap_read_PointerTons2__wfVariableStub
#define soap_read_PointerTons2__wfVariableStub(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__wfVariableStub(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToint
#define SOAP_TYPE_PointerToint (75)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);

#ifndef soap_write_PointerToint
#define soap_write_PointerToint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToint(soap, data),0) || soap_put_PointerToint(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);

#ifndef soap_read_PointerToint
#define soap_read_PointerToint(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__wfExecutor
#define SOAP_TYPE_PointerTons1__wfExecutor (74)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__wfExecutor(struct soap*, ns1__wfExecutor *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__wfExecutor(struct soap*, const char *, int, ns1__wfExecutor *const*, const char *);
SOAP_FMAC3 ns1__wfExecutor ** SOAP_FMAC4 soap_in_PointerTons1__wfExecutor(struct soap*, const char*, ns1__wfExecutor **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__wfExecutor(struct soap*, ns1__wfExecutor *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__wfExecutor
#define soap_write_PointerTons1__wfExecutor(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__wfExecutor(soap, data),0) || soap_put_PointerTons1__wfExecutor(soap, data, "ns1:wfExecutor", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__wfExecutor ** SOAP_FMAC4 soap_get_PointerTons1__wfExecutor(struct soap*, ns1__wfExecutor **, const char*, const char*);

#ifndef soap_read_PointerTons1__wfExecutor
#define soap_read_PointerTons1__wfExecutor(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__wfExecutor(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__wfTask
#define SOAP_TYPE_PointerToPointerTons1__wfTask (73)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__wfTask(struct soap*, ns1__wfTask **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__wfTask(struct soap*, const char *, int, ns1__wfTask **const*, const char *);
SOAP_FMAC3 ns1__wfTask *** SOAP_FMAC4 soap_in_PointerToPointerTons1__wfTask(struct soap*, const char*, ns1__wfTask ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__wfTask(struct soap*, ns1__wfTask **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__wfTask
#define soap_write_PointerToPointerTons1__wfTask(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToPointerTons1__wfTask(soap, data),0) || soap_put_PointerToPointerTons1__wfTask(soap, data, "ns1:wfTask", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__wfTask *** SOAP_FMAC4 soap_get_PointerToPointerTons1__wfTask(struct soap*, ns1__wfTask ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__wfTask
#define soap_read_PointerToPointerTons1__wfTask(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__wfTask(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__wfTask
#define SOAP_TYPE_PointerTons1__wfTask (72)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__wfTask(struct soap*, ns1__wfTask *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__wfTask(struct soap*, const char *, int, ns1__wfTask *const*, const char *);
SOAP_FMAC3 ns1__wfTask ** SOAP_FMAC4 soap_in_PointerTons1__wfTask(struct soap*, const char*, ns1__wfTask **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__wfTask(struct soap*, ns1__wfTask *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__wfTask
#define soap_write_PointerTons1__wfTask(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__wfTask(soap, data),0) || soap_put_PointerTons1__wfTask(soap, data, "ns1:wfTask", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__wfTask ** SOAP_FMAC4 soap_get_PointerTons1__wfTask(struct soap*, ns1__wfTask **, const char*, const char*);

#ifndef soap_read_PointerTons1__wfTask
#define soap_read_PointerTons1__wfTask(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__wfTask(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTotime
#define SOAP_TYPE_PointerTotime (71)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotime(struct soap*, time_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotime(struct soap*, const char *, int, time_t *const*, const char *);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTotime(struct soap*, const char*, time_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotime(struct soap*, time_t *const*, const char*, const char*);

#ifndef soap_write_PointerTotime
#define soap_write_PointerTotime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTotime(soap, data),0) || soap_put_PointerTotime(soap, data, "dateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTotime(struct soap*, time_t **, const char*, const char*);

#ifndef soap_read_PointerTotime
#define soap_read_PointerTotime(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTotime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__classPresentationType
#define SOAP_TYPE_PointerTons1__classPresentationType (70)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__classPresentationType(struct soap*, enum ns1__classPresentationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__classPresentationType(struct soap*, const char *, int, enum ns1__classPresentationType *const*, const char *);
SOAP_FMAC3 enum ns1__classPresentationType ** SOAP_FMAC4 soap_in_PointerTons1__classPresentationType(struct soap*, const char*, enum ns1__classPresentationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__classPresentationType(struct soap*, enum ns1__classPresentationType *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__classPresentationType
#define soap_write_PointerTons1__classPresentationType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__classPresentationType(soap, data),0) || soap_put_PointerTons1__classPresentationType(soap, data, "ns1:classPresentationType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns1__classPresentationType ** SOAP_FMAC4 soap_get_PointerTons1__classPresentationType(struct soap*, enum ns1__classPresentationType **, const char*, const char*);

#ifndef soap_read_PointerTons1__classPresentationType
#define soap_read_PointerTons1__classPresentationType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__classPresentationType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToLONG64
#define SOAP_TYPE_PointerToLONG64 (69)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToLONG64(struct soap*, LONG64 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToLONG64(struct soap*, const char *, int, LONG64 *const*, const char *);
SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_in_PointerToLONG64(struct soap*, const char*, LONG64 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToLONG64(struct soap*, LONG64 *const*, const char*, const char*);

#ifndef soap_write_PointerToLONG64
#define soap_write_PointerToLONG64(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToLONG64(soap, data),0) || soap_put_PointerToLONG64(soap, data, "long", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_get_PointerToLONG64(struct soap*, LONG64 **, const char*, const char*);

#ifndef soap_read_PointerToLONG64
#define soap_read_PointerToLONG64(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToLONG64(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__batchPresentation
#define SOAP_TYPE_PointerTons1__batchPresentation (68)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__batchPresentation(struct soap*, ns1__batchPresentation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__batchPresentation(struct soap*, const char *, int, ns1__batchPresentation *const*, const char *);
SOAP_FMAC3 ns1__batchPresentation ** SOAP_FMAC4 soap_in_PointerTons1__batchPresentation(struct soap*, const char*, ns1__batchPresentation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__batchPresentation(struct soap*, ns1__batchPresentation *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__batchPresentation
#define soap_write_PointerTons1__batchPresentation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__batchPresentation(soap, data),0) || soap_put_PointerTons1__batchPresentation(soap, data, "ns1:batchPresentation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__batchPresentation ** SOAP_FMAC4 soap_get_PointerTons1__batchPresentation(struct soap*, ns1__batchPresentation **, const char*, const char*);

#ifndef soap_read_PointerTons1__batchPresentation
#define soap_read_PointerTons1__batchPresentation(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__batchPresentation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__actor
#define SOAP_TYPE_PointerTons1__actor (67)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__actor(struct soap*, ns1__actor *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__actor(struct soap*, const char *, int, ns1__actor *const*, const char *);
SOAP_FMAC3 ns1__actor ** SOAP_FMAC4 soap_in_PointerTons1__actor(struct soap*, const char*, ns1__actor **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__actor(struct soap*, ns1__actor *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__actor
#define soap_write_PointerTons1__actor(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__actor(soap, data),0) || soap_put_PointerTons1__actor(soap, data, "ns1:actor", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__actor ** SOAP_FMAC4 soap_get_PointerTons1__actor(struct soap*, ns1__actor **, const char*, const char*);

#ifndef soap_read_PointerTons1__actor
#define soap_read_PointerTons1__actor(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__actor(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__user
#define SOAP_TYPE_PointerTons1__user (66)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__user(struct soap*, ns1__user *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__user(struct soap*, const char *, int, ns1__user *const*, const char *);
SOAP_FMAC3 ns1__user ** SOAP_FMAC4 soap_in_PointerTons1__user(struct soap*, const char*, ns1__user **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__user(struct soap*, ns1__user *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__user
#define soap_write_PointerTons1__user(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__user(soap, data),0) || soap_put_PointerTons1__user(soap, data, "ns1:user", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__user ** SOAP_FMAC4 soap_get_PointerTons1__user(struct soap*, ns1__user **, const char*, const char*);

#ifndef soap_read_PointerTons1__user
#define soap_read_PointerTons1__user(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__user(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__base64Binary
#define SOAP_TYPE_PointerToxsd__base64Binary (65)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap*, const char *, int, xsd__base64Binary *const*, const char *);
SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap*, const char*, xsd__base64Binary **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__base64Binary
#define soap_write_PointerToxsd__base64Binary(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__base64Binary(soap, data),0) || soap_put_PointerToxsd__base64Binary(soap, data, "xsd:base64Binary", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary **, const char*, const char*);

#ifndef soap_read_PointerToxsd__base64Binary
#define soap_read_PointerToxsd__base64Binary(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__base64Binary(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_wstring
#define SOAP_TYPE_wstring (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wstring(struct soap*, wchar_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstring(struct soap*, const char*, int, wchar_t*const*, const char*);
SOAP_FMAC3 wchar_t * * SOAP_FMAC4 soap_in_wstring(struct soap*, const char*, wchar_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wstring(struct soap*, wchar_t *const*, const char*, const char*);

#ifndef soap_write_wstring
#define soap_write_wstring(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wstring(soap, data),0) || soap_put_wstring(soap, data, "wchar", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wchar_t ** SOAP_FMAC4 soap_get_wstring(struct soap*, wchar_t **, const char*, const char*);

#ifndef soap_read_wstring
#define soap_read_wstring(soap, data) ( soap_begin_recv(soap) || !soap_get_wstring(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTounsignedByte
#define SOAP_TYPE_PointerTounsignedByte (12)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);

#ifndef soap_write_PointerTounsignedByte
#define soap_write_PointerTounsignedByte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTounsignedByte(soap, data),0) || soap_put_PointerTounsignedByte(soap, data, "unsignedByte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);

#ifndef soap_read_PointerTounsignedByte
#define soap_read_PointerTounsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTounsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data),0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data),0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

/* End of soapH.h */
